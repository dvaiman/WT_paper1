---
title: "summarizing SCB population data"
format: html
editor: source
---

Summarizing population data from datsets 1995-2023 into five years and weighded mean over all years. read in data, create categorical varaibles, , extract thos who are in the HPI dataset into an own dataset via the LopNr variable and then summarize percentages of different variables into five year groups.

To accurately calculate a weighted mean, which accounts for the varying sizes of each group across periods, you can use the following formula:

$$
\text{Weighted Mean} = \frac{\sum (W_i \times X_i)}{\sum W_i}
$$

Where:

-   $W_i$ is the weight for period $i$ (in this context, the total count for the variable in the period),
-   $X_i$ is the percentage value for the variable in period $i$,
-   The summation ($\sum$) runs over all periods.

# Example Calculation

Suppose we have three five-year periods with the following percentages of males and total populations:

-   Period 1: 60% males (with 200 individuals in total)
-   Period 2: 55% males (with 300 individuals in total)
-   Period 3: 50% males (with 500 individuals in total)

We can calculate the weighted mean percentage of males across all periods as follows:

```{r}
# Define the percentages and populations
percentages <- c(60, 55, 50)
populations <- c(200, 300, 500)

# Calculate the weighted mean
weighted_mean <- sum(percentages * populations) / sum(populations)

# Print the result
weighted_mean

```






```{r}
library(tidyverse)
library(haven)
library(here)
```

```{r}

hpa <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "HPI", "HPI clean", "EEB_hpb_clean_2023-10-16.csv")) %>% select(LopNr)



scb_grunduppgifter <- 
haven::read_sas(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans002", "eeb_lev_grunduppgifter.sas7bdat"))


scb_2022 <- 
haven::read_sas(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022", "eeb_lev_2022.sas7bdat"))

scb_2021 <- 
haven::read_sas(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022", "eeb_lev_2021.sas7bdat"))

scb_2020 <- 
haven::read_sas(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022", "eeb_lev_2020.sas7bdat"))

scb_2012 <- 
haven::read_sas(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022", "eeb_lev_2012.sas7bdat"))

scb_2011 <- 
haven::read_sas(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022", "eeb_lev_2011.sas7bdat"))


scb_1995 <- 
haven::read_sas(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022", "eeb_lev_1995.sas7bdat"))

scb_1995 %>%  count(AstSNI92)
scb_2020 %>% glimpse()
scb_2011 %>% count(InstKod7)
```


# Function 1
read in one dataset 
split into with and without HPI data, 
make categories
save datasets into new folders, 
remove old data and use gc()
start over again until all datasets are created 

```{r}




hpa <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "HPI", "HPI clean", "EEB_hpb_clean_2023-10-16.csv")) %>% select(LopNr)




here::here()
here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022")
# Initialize here; it automatically finds your project root
#here::i_am("path/to/your/project/file.Rproj") # Adjust this to point to your actual R project file

# Assuming 'hpa' dataframe is loaded with the LopNr of interest
interested_LopNr <- hpa %>% pull(LopNr)

# Construct the base path to the data directory
data_base_path <- here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022")

# Define the target folder for saving filtered CSV files
output_folder_with <- here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","with_hpi_lopnr")

output_folder_without <- here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","without_hpi_lopnr")

# Define the years of interest
years <- 1990:2022

# Generate file paths for each year
file_paths <- map(years, ~ file.path(data_base_path, str_glue("eeb_lev_{.x}.sas7bdat")))

# Process each file
map(file_paths, ~{
  file_path <- .x
    year <- str_extract(basename(file_path), "\\d{4}") # Extract the year from the file name

  data <- read_sas(file_path) %>%
    mutate(Year = year) # Add the Year variable
  
  # Filter data for the interested LopNr and save
  filtered_data <- filter(data, LopNr %in% interested_LopNr)
  csv_path_filtered <-  file.path(output_folder_with, paste("with_HPI_data_", year, ".csv", sep="")) 
  write_csv(filtered_data, csv_path_filtered)
  
  # Filter out the interested LopNr and save
  excluded_data <- filter(data, !LopNr %in% interested_LopNr)
  csv_path_excluded <- csv_path_excluded <- file.path(output_folder_without, paste("without_HPI_data_", year, ".csv", sep="")) 
  write_csv(excluded_data, csv_path_excluded)
})
# Note: To combine filtered data from all files into one dataframe, 
# you would read from the _filtered.csv files similarly to previous examples
filtered_csv_paths <- list.files(here::here(), pattern = "_filtered\\.csv$", full.names = TRUE)
combined_filtered_data <- map_dfr(filtered_csv_paths, read_csv, .id = "source")

# Now, `combined_filtered_data` contains all the filtered data combined




# 
# str_replace(output_folder_with, "sas7bdat$", "with_HPI_data.csv")
# str_replace(output_folder_without, "sas7bdat$", "without_HPI_data")
# 
# 
# csv_path_filtered <- file.path(output_folder_with, paste("with_HPI_data_", year, ".csv", sep=""))
# csv_path_excluded <- file.path(output_folder_without, paste("without_HPI_data_", year, ".csv", sep=""))

```



# Function 2
read in one dataset 
split into with and without HPI data, 
add birthyear, fodelseland and sex from grunduppgifter and mutate new variables
make categories
save datasets into new folders, 
remove old data and use gc()
start over again until all datasets are created 

```{r}



# Load datasets
hpa <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "HPI", "HPI clean", "EEB_hpb_clean_2023-10-16.csv")) %>% select(LopNr)

grunduppgifter <- 
haven::read_sas(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022", "eeb_lev_grunduppgifter.sas7bdat")) %>% 
  select(LopNr, Kon, FodelseLand_EU28, FodelseAr)


# sni translation key
 translation_key_df <-
openxlsx::read.xlsx(here::here(str_glue("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/translation_SNI-versions.xlsx"))) %>% as_tibble() %>% 
   select(version, huvudgrupp_original, avdelning_samstammig, SNI_group) %>% 
# Adjust the translation key dataframe to include a uniform identifier for joining
  mutate(
    join_key = str_c(version, str_pad(huvudgrupp_original, width = 2, pad = "0"))
  )

# Prepare the main dataframe for joining by creating a similar join key


# data from tillv√§xtverket, another possibility could be skr
metropolitan_municipalities <- c("114", "123", "126", "127", "128", "136", "138", "139", "160", 
                                 "162", "163", "180", "181", "182", "183", "184", "186", "191", 
                                 "1230", "1231", "1262", "1280", "1281", "1402", "1480", "1481")

dense_municipalities <- c("115", "117", "120", "140", "187", "305", "330", "380", "381", "461", 
                          "480", "481", "483", "484", "486", "561", "562", "580", "581", "583", 
                          "584", "642", "643", "680", "682", "683", "686", "687", "760", "765", 
                          "780", "781", "880", "881", "882", "883", "884", "1060", "1080", "1082", 
                          "1233", "1261", "1263", "1272", "1275", "1282", "1277", "1282", "1283", 
                          "1285", "1286", "1287", "1290", "1292", "1380", 
                          "1382", "1401", "1407", "1440", "1441", "1472", "1482", "1484", "1485", 
                          "1486", "1487", "1488", "1489", "1490", "1492", "1493", "1494", "1495", 
                          "1496", "1497", "1498", "1499", "1715", "1761", "1780", "1781", "1782", 
                          "1784", "1785", "1862", "1880", "1881", "1883", "1884", "1907", "1960", 
                          "1961", "1980", "1981", "1982", "1983", "1984", "2062", "2080", "2081", 
                          "2085", "2104", "2180", "2181", "2262", "2280", "2281", "2380", "2523", "2580", "2581", 
                          "2582", "2583", "2584")

rural_municipalities <- c("125", "128", "188", "192", "319", "331", "360", "382", "428", "482", "488", "509", 
                          "512", "513", "560", "563", "580", "582", "586", "604", "617", "662", "665", 
                          "684", "685", "761", "763", "764", "767", "821", "834", "840", "860", "861", "862", "885", 
                          "980", "1081", "1083", "1214", "1256", "1257", "1260", "1264", "1265", 
                          "1266", "1267", "1270", "1273", "1276", "1278", "1284", "1291", "1293", "1315", 
                          "1381", "1383", "1384", "1415", "1419", "1421", "1427", "1430", "1435", 
                          "1438", "1439", "1442", "1443", "1444", "1445", "1446", "1447", "1452", 
                          "1460", "1461", "1462", "1463", "1465", "1466", "1491", "1470", "1471", "1473", 
                          "1730", "1737", "1760", "1762", "1763", "1764", "1765", "1766", "1783", "1814", 
                          "1860", "1861", "1863", "1864", "1882", "1885", "1904", "1962", "2021", 
                          "2023", "2026", "2029", "2031", 
                          "2034", "2039", "2061", "2082", "2083", "2084", "2101", "2121", "2132", 
                          "2161", "2182", "2183", "2184", "2260", "2282", "2283", "2284", "2303", 
                          "2305", "2309", "2313", "2321", "2326", "2361", "2401", "2403", "2404", 
                          "2409", "2417", "2418", "2421", "2422", "2425", "2460", "2462", "2463", 
                          "2480", "2481", "2482", "2505", "2506", "2510", "2513", "2514", "2518", 
                          "2521", "2560")





# Run function for conditional filter for syss√§ls√§√§tningsstatus

add_conditional_syssstat_filters <- function(data) {
  # Define the SyssStat* variables you're interested in
  columns_to_check <- c("SyssStatG", "SyssStat", "SyssStatJ", "SyssStat11", "SyssStat19")
  
  # Initialize a filter expression that is always true
  filter_expr <- expr(TRUE)
  
  # Dynamically update the filter expression based on column existence
  for (col in columns_to_check) {
    if (col %in% names(data)) {
      # Dynamically append the condition to the filter expression
      filter_expr <- expr(!!filter_expr & (!!sym(col) %in% c(1, 5)))
    }
  }
  
  # Apply the dynamic filter expression to the dataframe
  data %>% filter(!!filter_expr)
}


# Assuming 'hpa' dataframe is loaded with the LopNr of interest
interested_LopNr <- hpa %>% pull(LopNr)

# Construct the base path to the data directory
data_base_path <- here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","Leverans1990_2022")

# Define the target folder for saving filtered CSV files
output_folder_with <- here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "with_hpi_lopnr", "2.filtered")

output_folder_without <- here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "without_hpi_lopnr", "2.filtered")

# Define the years of interest
years <- 1990:2021

# Generate file paths for each year
file_paths <- map(years, ~ file.path(data_base_path, str_glue("eeb_lev_{.x}.sas7bdat")))

# Process each file
map(file_paths, ~{
  file_path <- .x
    year <- str_extract(basename(file_path), "\\d{4}") # Extract the year from the file name

  data <- read_sas(file_path) %>%
    left_join(grunduppgifter) %>% 
  mutate(
    Year = as.numeric(year), # Add the Year variable
    FodelseAr = as.numeric(FodelseAr),
    Age = Year - FodelseAr
  ) %>% 
  filter(Age > 17) %>%
  add_conditional_syssstat_filters() %>% 
    # add join key for SNI
      mutate(
    AstSNI2007 = if("AstSNI2007" %in% names(.)) as.character(AstSNI2007) else NA_character_,
    AstSNI2002 = if("AstSNI2002" %in% names(.)) as.character(AstSNI2002) else NA_character_,
    AstSNI92 = if("AstSNI92" %in% names(.)) as.character(AstSNI92) else NA_character_) %>% 
    mutate(
    join_key = case_when(
      if("AstSNI2007" %in% names(.)) !is.na(AstSNI2007) ~ str_c("AstSNI2007", substr(AstSNI2007, 1, 2)),
      if("AstSNI2002" %in% names(.)) !is.na(AstSNI2002) ~ str_c("AstSNI2002", substr(AstSNI2002, 1, 2)),
      if("AstSNI92" %in% names(.)) !is.na(AstSNI92) ~ str_c("AstSNI92", substr(AstSNI92, 1, 2)),
      TRUE ~ NA_character_
    )) %>% 
      # Join the key, with SNI_group, avdelning_samstammig
     left_join(translation_key_df, by = "join_key") %>%  
      select(-join_key) %>% 
  mutate(
    AgeGroup = case_when(
      Age >= 18 & Age <= 35 ~ "18-35",
      Age > 35 & Age <= 50 ~ "36-50",
      Age > 50 & Age <= 65 ~ "51-65",
      TRUE ~ ">65"
    ),
    Sex = Kon,
    BirthPlace = case_when(
      FodelseLand_EU28 == "Sverige" ~ "Sweden",
      FodelseLand_EU28 %in% c("EU utom Norden", "Europa utom EU och Norden", "Norden utom Sverige") ~ "Europe",
      FodelseLand_EU28 %in% 'Ok√§nt'  ~ NA_character_,
      TRUE ~ "Outside Europe"
    ),
    MarriedOrPartner = case_when(
      Civil %in% c("G", "RP") ~ "Partner",  # Married or Registered Partner
      Civil %in% c("OG", "S", "√Ñ", "SP", "EP") ~ "Single",  # Other categories
      TRUE ~ NA_character_  # Assign NA to cases that do not match any condition
    ),
    KommunSize = case_when(
    Kommun %in% metropolitan_municipalities ~ "metropolitan_municipalities",
    Kommun %in% dense_municipalities ~ "dense_municipalities",
    Kommun %in% rural_municipalities ~ "rural_municipalities",
    TRUE ~ NA_character_
  ),
    EducationLevel = if ("Sun2000niva_old" %in% names(.)) {
        case_when(
          Sun2000niva_old %in% c("1", "2") ~ "Primary",
          Sun2000niva_old %in% c("3", "4") ~ "Secondary",
          Sun2000niva_old == "5" ~ "Tertiary <2 years",
          Sun2000niva_old %in% c("6", "7") ~ "Higher Education",
          TRUE ~ NA_character_
        )
      } else if ("Sun2020niva_old" %in% names(.)) {
        case_when(
          Sun2020niva_Old %in% c("1", "2") ~ "Primary",
          Sun2020niva_Old %in% c("3", "4") ~ "Secondary",
          Sun2020niva_Old == "5" ~ "Tertiary <2 years",
          Sun2020niva_Old %in% c("6", "7") ~ "Higher Education",
          TRUE ~ NA_character_
        )
      } else NA_character_,
  
   InstitutionCategory = if ("InstKod" %in% names(.)) {
      case_when(
        substr(InstKod, 3, 3) %in% c("1") ~ "Public Govermental",
        substr(InstKod, 3, 3) %in% c("2") ~ "Public Regional",
        TRUE ~ "Private"
      )
    } else if ("InstKod6" %in% names(.)) {
      case_when(
        substr(InstKod6, 4, 4) %in% c("1") ~ "Public Govermental",
        substr(InstKod6, 4, 4) %in% c("2") ~ "Public Regional",
        TRUE ~ "Private"
      )
    } else if ("InstKod7" %in% names(.)) {
      case_when(
        substr(InstKod7, 4, 5) %in% c("10") ~ "Public Govermental",
        substr(InstKod7, 4, 5) %in% c("20", "30") ~ "Public Regional",
        TRUE ~ "Private"
      )
    } else if ("InstKod10" %in% names(.)) {
      case_when(
        substr(InstKod10, 4, 5) %in% c("10") ~ "Public Govermental",
        substr(InstKod10, 4, 5) %in% c("20", "30") ~ "Public Regional",
        TRUE ~ "Private"
      )
    } else {
      NA_character_
    },
  
      Ssyk_majorlevel = if (length(grep("^Ssyk3", names(.))) > 0) {
    as.numeric(str_extract(.[[grep("^Ssyk3", names(.))[[1]]]], "^\\d"))
  } else NA # Or some other default value or handling
  ) %>% 
  mutate(
    IncomeLevel = case_when(
      CSFVI >= 2 * median(CSFVI, na.rm = TRUE) ~ "‚â•200%",
      CSFVI >= 1.2 * median(CSFVI, na.rm = TRUE) & CSFVI < 2 * median(CSFVI, na.rm = TRUE) ~ "120‚Äì199%",
      CSFVI >= 0.8 * median(CSFVI, na.rm = TRUE) & CSFVI < 1.2 * median(CSFVI, na.rm = TRUE) ~ "80‚Äì119%",
      CSFVI >= 0.6 * median(CSFVI, na.rm = TRUE) & CSFVI < 0.8 * median(CSFVI, na.rm = TRUE) ~ "60‚Äì79%",
      CSFVI < 0.6 * median(CSFVI, na.rm = TRUE) ~ "<60%",
      TRUE ~ NA_character_
    ),
    LoneInk_grupp = case_when(
      LoneInk >= 2 * median(LoneInk, na.rm = TRUE) ~ "‚â•200%",
      LoneInk >= 1.2 * median(LoneInk, na.rm = TRUE) & LoneInk < 2 * median(LoneInk, na.rm = TRUE) ~ "120‚Äì199%",
      LoneInk >= 0.8 * median(LoneInk, na.rm = TRUE) & LoneInk < 1.2 * median(LoneInk, na.rm = TRUE) ~ "80‚Äì119%",
      LoneInk >= 0.6 * median(LoneInk, na.rm = TRUE) & LoneInk < 0.8 * median(LoneInk, na.rm = TRUE) ~ "60‚Äì79%",
      LoneInk < 0.6 * median(LoneInk, na.rm = TRUE) ~ "<60%",
      TRUE ~ NA_character_
    )) %>% 
    # L√∂ne eller f√∂retagarinkomst f√∂r huvudsaklig syssels√§ttning
           mutate(    
             Lon_Foretag = if ("LonFInk" %in% names(.)) {
      median_LoneFInk <- median(LonFInk, na.rm = TRUE)
      case_when(
        LonFInk >= 2 * median_LoneFInk ~ "‚â•200%",
        LonFInk >= 1.2 * median_LoneFInk & LonFInk < 2 * median_LoneFInk ~ "120‚Äì199%",
        LonFInk >= 0.8 * median_LoneFInk & LonFInk < 1.2 * median_LoneFInk ~ "80‚Äì119%",
        LonFInk >= 0.6 * median_LoneFInk & LonFInk < 0.8 * median_LoneFInk ~ "60‚Äì79%",
        LonFInk < 0.6 * median_LoneFInk ~ "<60%",
        TRUE ~ NA_character_
      )
    } else if ("ArsLonFInk" %in% names(.)) {
      median_ArsLonFInk <- median(ArsLonFInk, na.rm = TRUE)
      case_when(
        ArsLonFInk >= 2 * median_ArsLonFInk ~ "‚â•200%",
        ArsLonFInk >= 1.2 * median_ArsLonFInk & ArsLonFInk < 2 * median_ArsLonFInk ~ "120‚Äì199%",
        ArsLonFInk >= 0.8 * median_ArsLonFInk & ArsLonFInk < 1.2 * median_ArsLonFInk ~ "80‚Äì119%",
        ArsLonFInk >= 0.6 * median_ArsLonFInk & ArsLonFInk < 0.8 * median_ArsLonFInk ~ "60‚Äì79%",
        ArsLonFInk < 0.6 * median_ArsLonFInk ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_,
    
    net_sales_category = if ("Ftg_Nettoomsattning" %in% names(.)) {
      median_Ftg_Nettoomsattning <- median(Ftg_Nettoomsattning, na.rm = TRUE)
      case_when(
        Ftg_Nettoomsattning >= 2 * median_Ftg_Nettoomsattning ~ "‚â•200%",
        Ftg_Nettoomsattning >= 1.2 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 2 * median_Ftg_Nettoomsattning ~ "120‚Äì199%",
        Ftg_Nettoomsattning >= 0.8 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 1.2 * median_Ftg_Nettoomsattning ~ "80‚Äì119%",
        Ftg_Nettoomsattning >= 0.6 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 0.8 * median_Ftg_Nettoomsattning ~ "60‚Äì79%",
        Ftg_Nettoomsattning < 0.6 * median_Ftg_Nettoomsattning ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_,
    
        operating_profit_category = if ("Ftg_Rorelseresultat" %in% names(.)) {
      # Directly using median in case_when conditions
      case_when(
        Ftg_Rorelseresultat >= 2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "‚â•200%",
        Ftg_Rorelseresultat >= 1.2 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "120‚Äì199%",
        Ftg_Rorelseresultat >= 0.8 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 1.2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "80‚Äì119%",
        Ftg_Rorelseresultat >= 0.6 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 0.8 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "60‚Äì79%",
        Ftg_Rorelseresultat < 0.6 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_,
    Number_of_employees_Category = case_when(
    Ast_AntalSys >= 1 & Ast_AntalSys <= 9 ~ "Micro-Enterprises: 1-9 employees",
    Ast_AntalSys >= 10 & Ast_AntalSys <= 49 ~ "Small Enterprises: 10-49 employees",
    Ast_AntalSys >= 50 & Ast_AntalSys <= 249 ~ "Medium-Sized Enterprises: 50-249 employees",
    Ast_AntalSys >= 250 ~ "Large Enterprises: 250+ employees",
    TRUE ~ NA_character_
           ),
    Income_Sources_Category = case_when(
    AntAns == 0 ~ "No Income Sources",
    AntAns == 1 ~ "Single Income Source",
    AntAns >= 2 & AntAns <= 3 ~ "Multiple Income Sources: 2-3",
    AntAns >= 4 & AntAns <= 5 ~ "Diverse Income Sources: 4-5",
    AntAns >= 6 ~ "Highly Diverse Income Sources: 6+",
    TRUE ~ NA_character_ # For handling NA values
  ),
  Turnover_Rate_Category = case_when(
    PersOms_Harledd == 0 ~ "No Turnover",
    PersOms_Harledd > 0 & PersOms_Harledd <= 1 ~ "Very Low Turnover (0.1-1.0)",
    PersOms_Harledd > 1 & PersOms_Harledd <= 2 ~ "Low Turnover (1.1-2.0)",
    PersOms_Harledd > 2 & PersOms_Harledd <= 5 ~ "Moderate Turnover (2.1-5.0)",
    PersOms_Harledd > 5 & PersOms_Harledd <= 10 ~ "High Turnover (5.1-10.0)",
    PersOms_Harledd > 10 & PersOms_Harledd <= 20 ~ "Very High Turnover (10.1-20.0)",
    PersOms_Harledd > 20 ~ "Extremely High Turnover (20.1+)",
    TRUE ~ NA_character_ # For handling NA or unexpected values
  ),
  Turnover_Rate_Percent = (PersOms_Harledd / Ast_AntalSys) * 100
      # Operating_Margin_Percent = ifelse(
      # all(c("Ftg_Rorelseresultat", "Ftg_Nettoomsattning") %in% names(.)) & Ftg_Nettoomsattning != 0,
      # (Ftg_Rorelseresultat / Ftg_Nettoomsattning) * 100,
      # NA_real_ # Assign NA if Net Sales is zero or columns do not exist
  #  )
           )
  
  # Filter data for the interested LopNr and save
  filtered_data <- filter(data, LopNr %in% interested_LopNr)
  csv_path_filtered <-  file.path(output_folder_with, paste("with_HPI_data_categories", year, ".csv", sep="")) 
  write_csv(filtered_data, csv_path_filtered)
  
  # Filter out the interested LopNr and save
  excluded_data <- filter(data, !LopNr %in% interested_LopNr)
  csv_path_excluded <- csv_path_excluded <- file.path(output_folder_without, paste("without_HPI_data_categories", year, ".csv", sep="")) 
  write_csv(excluded_data, csv_path_excluded)
})






# Note: To combine filtered data from all files into one dataframe, 
# you would read from the _filtered.csv files similarly to previous examples
filtered_csv_paths <- list.files(here::here(), pattern = "_filtered\\.csv$", full.names = TRUE)
combined_filtered_data <- map_dfr(filtered_csv_paths, read_csv, .id = "source")




```


Read in 5 dataset without hpi data
bind or merge the five datasets, 
(SyssStat 1 or 5)
join with scb_grunduppgifter where (year of HPA)
extract each year of LopNr_Arbstld
into hpi vs without data
```{r}
set_seed(123)

hpa <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "HPI", "HPI clean", "EEB_hpb_clean_2023-10-16.csv")) %>% select(LopNr)

```


# Function 3 without hpi data
Read in 5 dataset without hpi data, 
bind or merge the five datasets, 
filter each row with 1 or 5 in one of the variables SyssStatG, SyssStat, SyssStatJ, SyssStat11, SyssStat19
randomly sample one of each LopNr in the five year period "group_by(LopNr) %>% sample_n(1)"
join with scb_grunduppgifter where Kon, Age and FodelseLand_EU28 variables are
filter age over 18
create new variables such as age groups, percentage of median income, , 
summarize into count per 5 years (to later be able to calculate weighted mean of the whole period), % women and men, % age groups, % of median income etc, 
save dataset, 
remove the datasets and use gc() 
and start over until all datasets are created
the year groupings to use are "1995-1999", "2000-2004", "2005-2009","2010-2014", "2015-2019", "2020-2023",

```{r}




data_base_path <- here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","without_hpi_lopnr")

set_seed <- function(data, seed = 123) {
  set.seed(seed)
  return(data)
}



process_datasets <- function(year_group, file_paths) {
  # 1. Read in the datasets
 datasets <- map_df(file_paths, ~read_csv(.x) %>%
                      select(LopNr, AgeGroup, Sex, BirthPlace, MarriedOrPartner, 
                             KommunSize, EducationLevel,InstitutionCategory, Ssyk_majorlevel, IncomeLevel, 
                             LoneInk_grupp, Lon_Foretag, net_sales_category, SNI_group,
                             operating_profit_category, Number_of_employees_Category, 
                             Income_Sources_Category, Turnover_Rate_Category, 
                             Turnover_Rate_Percent)) #Operating_Margin_Percent
  
  # 3. Randomly sample one of each LopNr
  sampled_data <-  datasets %>%
    group_by(LopNr) %>%
    set_seed(seed = 123) %>%
    sample_n(1) %>%
    ungroup()
  
  # 4. Summarize data
  
  #  variable lists
categorical_vars <- c("AgeGroup", "Sex", "BirthPlace", "MarriedOrPartner", "KommunSize", "InstitutionCategory",
                      "EducationLevel", "Ssyk_majorlevel","SNI_group",  "IncomeLevel", "LoneInk_grupp", 
                      "Lon_Foretag", "net_sales_category", "operating_profit_category", 
                      "Number_of_employees_Category", "Income_Sources_Category", 
                      "Turnover_Rate_Category")
continuous_vars <- c("Turnover_Rate_Percent") #, "Operating_Margin_Percent"
  
calculate_percentages <- function(df, vars, group_var = NULL) {
  if (!is.null(group_var) && group_var %in% names(df)) {
    df %>%
      mutate(across(all_of(vars), as.character)) %>% # Ensure vars are characters
      select(.data[[group_var]], all_of(vars)) %>%
      pivot_longer(cols = -all_of(group_var), names_to = "Variable", values_to = "Categories") %>%
      group_by(.data[[group_var]], Variable, Categories) %>%
      summarize(n = n(), .groups = "drop_last") %>%
      group_by(.data[[group_var]], Variable) %>%
      mutate(Value = 100 * (n / sum(n))) %>%
      ungroup() %>%
      select(-sum) %>%
      rename(Value = Percent) # Ensure unified "Value" column for output
  } else {
    df %>%
      mutate(across(all_of(vars), as.character)) %>% # Ensure vars are characters
      pivot_longer(cols = all_of(vars), names_to = "Variable", values_to = "Categories") %>%
      count(Variable, Categories) %>%
      group_by(Variable) %>%
      mutate(Value = 100 * n / sum(n)) %>%
      ungroup()
  }
}


calculate_means <-  function(df, vars) {
  summaries <- lapply(vars, function(var) {
    total_count <- nrow(df)
    na_count <- sum(is.na(df[[var]]))
    non_na_count <- total_count - na_count
    mean_val <- mean(df[[var]], na.rm = TRUE)
    
    data.frame(
      Variable = rep(var, 2),
      #Categories = "", # Empty to match the desired format
      n = c(non_na_count, na_count), # Count of non-NA values for mean, and NA count
      Value = c(mean_val, NA), # Mean for non-NA, NA for the NA count row
      Categories = c("Mean", "NA Count") # Distinguishing between mean value and NA count
    ) %>% as_tibble()
  })
  
  do.call(rbind, summaries)
}



summary_data <- bind_rows(
  calculate_percentages(sampled_data, categorical_vars),
  calculate_means(sampled_data, continuous_vars)
)
  
  # 5. Save the dataset
path_output <- here::here(str_glue("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/without_hpi_lopnr/3.summarized/Summary_witout_hpi_data_{year_group}.csv"))


  write_csv(summary_data, path_output)
  
  # 6. Clear memory
  rm(list = c("datasets", "filtered_data", "sampled_data", "enriched_data", "final_data", "summary_data"))
  gc()
}

# Example usage
# Define file paths for one of the five-year groups (adjust paths accordingly)
file_paths_1995_1999 <- c(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","without_hpi_lopnr", "2.filtered", "without_HPI_data_categories1995.csv"), 
                          here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","without_hpi_lopnr", "2.filtered", "without_HPI_data_categories1996.csv"), 
                          here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","without_hpi_lopnr", "2.filtered", "without_HPI_data_categories1997.csv"), 
                          here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","without_hpi_lopnr", "2.filtered", "without_HPI_data_categories1998.csv"), 
                          here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","without_hpi_lopnr", "2.filtered", "without_HPI_data_categories1999.csv"))

generate_file_paths <- function(start_year, end_year, base_path) {
  years <- start_year:end_year
  file_paths <- lapply(years, function(year) {
    paste0(base_path, "/without_HPI_data_categories", year, ".csv")
  })
  return(unlist(file_paths))
}

# Assuming base_path is defined like this (adjust according to your directories):
base_path <- here::here("..", "..", "..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "without_hpi_lopnr", "2.filtered")



# Generate file paths for the period 2000-2004 as an example
file_paths_1995_1999 <- generate_file_paths(1995, 1999, base_path)
file_paths_2000_2004 <- generate_file_paths(2000, 2004, base_path)
file_paths_2005_2009 <- generate_file_paths(2005, 2009, base_path)
file_paths_2010_2014 <- generate_file_paths(2010, 2014, base_path)
file_paths_2015_2019 <- generate_file_paths(2015, 2019, base_path)
file_paths_2020_2021 <- generate_file_paths(2020, 2021, base_path)


# Call the function
process_datasets("1995-1999", file_paths_1995_1999)
process_datasets("2000-2004", file_paths_2000_2004)
process_datasets("2005-2009", file_paths_2005_2009)
process_datasets("2010-2014", file_paths_2010_2014)
process_datasets("2015-2019", file_paths_2015_2019)
process_datasets("2020-2021", file_paths_2020_2021)


scb_2012 %>% glimpse()

```


# function 4 with hpi data

```{r}

# scb_withhpi1996<-
# read_csv(here::here("..", "..", "..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "with_hpi_lopnr", "2.filtered", "with_HPI_data_categories1996.csv"))
# 
# 
# data_base_path <- here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306","with_hpi_lopnr")


process_datasets <- function(year_group, file_paths) {
  # 1. Read in the datasets
 datasets <- map_df(file_paths, ~read_csv(.x) %>%
                      select(LopNr, AgeGroup, Sex, Year, BirthPlace, MarriedOrPartner, 
                             KommunSize, EducationLevel,InstitutionCategory, Ssyk_majorlevel, IncomeLevel, 
                             LoneInk_grupp, Lon_Foretag, net_sales_category, SNI_group,
                             operating_profit_category, Number_of_employees_Category, 
                             Income_Sources_Category, Turnover_Rate_Category, 
                             Turnover_Rate_Percent)) #Operating_Margin_Percent
 
 hpa <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "HPI", "HPI clean", "EEB_hpb_clean_2023-10-16.csv")) %>% 
   filter(rowSums(!is.na(select(., EkB_rel_VO2, Astrand_rel_VO2, HeightCM, WeightKG, BloodPressureSystolic, BloodPressureDiastolic))) >= 2,
         rowSums(!is.na(select(., ExerciseAnswer, TobaccoSmoking, Diet, Health, StressOverall, SymptomBackNeck))) >= 2) %>% 
     arrange(LopNr, Performed) %>% 
  mutate(hpa_number = row_number(), 
         test_count = n(), .by = LopNr) %>% 
    # take the first hpi tests
  filter(hpa_number == 1) %>% 
   select(LopNr, Year) %>% 
   mutate(selected = 1)
  
  # 3. Randomly sample one of each LopNr
  sampled_data <-  
    datasets %>% 
    # join by lopnr and Year with HPI data
    left_join(hpa, by = join_by(LopNr, Year)) %>% 
    # filter those that has an HPI test
    filter(selected==1)  #%>% 
   # distinct(LopNr, Year, .keep_all = TRUE)
  
  

  # 4. Summarize data
  
  #  variable lists
categorical_vars <- c("AgeGroup", "Sex", "BirthPlace", "MarriedOrPartner", "KommunSize", "InstitutionCategory",
                      "EducationLevel", "Ssyk_majorlevel","SNI_group",  "IncomeLevel", "LoneInk_grupp", 
                      "Lon_Foretag", "net_sales_category", "operating_profit_category", 
                      "Number_of_employees_Category", "Income_Sources_Category", 
                      "Turnover_Rate_Category")
continuous_vars <- c("Turnover_Rate_Percent") #, "Operating_Margin_Percent"
  
calculate_percentages <- function(df, vars, group_var = NULL) {
  if (!is.null(group_var) && group_var %in% names(df)) {
    df %>%
      mutate(across(all_of(vars), as.character)) %>% # Ensure vars are characters
      select(.data[[group_var]], all_of(vars)) %>%
      pivot_longer(cols = -all_of(group_var), names_to = "Variable", values_to = "Categories") %>%
      group_by(.data[[group_var]], Variable, Categories) %>%
      summarize(n = n(), .groups = "drop_last") %>%
      group_by(.data[[group_var]], Variable) %>%
      mutate(Value = 100 * (n / sum(n))) %>%
      ungroup() %>%
      select(-sum) %>%
      rename(Value = Percent) # Ensure unified "Value" column for output
  } else {
    df %>%
      mutate(across(all_of(vars), as.character)) %>% # Ensure vars are characters
      pivot_longer(cols = all_of(vars), names_to = "Variable", values_to = "Categories") %>%
      count(Variable, Categories) %>%
      group_by(Variable) %>%
      mutate(Value = 100 * n / sum(n)) %>%
      ungroup()
  }
}


calculate_means <-  function(df, vars) {
  summaries <- lapply(vars, function(var) {
    total_count <- nrow(df)
    na_count <- sum(is.na(df[[var]]))
    non_na_count <- total_count - na_count
    mean_val <- mean(df[[var]], na.rm = TRUE)
    
    data.frame(
      Variable = rep(var, 2),
      #Categories = "", # Empty to match the desired format
      n = c(non_na_count, na_count), # Count of non-NA values for mean, and NA count
      Value = c(mean_val, NA), # Mean for non-NA, NA for the NA count row
      Categories = c("Mean", "NA Count") # Distinguishing between mean value and NA count
    ) %>% as_tibble()
  })
  
  do.call(rbind, summaries)
}



summary_data <- bind_rows(
  calculate_percentages(sampled_data, categorical_vars),
  calculate_means(sampled_data, continuous_vars)
)
  
  # 5. Save the dataset
path_output <- here::here(str_glue("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/with_hpi_lopnr/3.summarized/Summary_witout_hpi_data_{year_group}.csv"))


  write_csv(summary_data, path_output)
  
  # 6. Clear memory
  rm(list = c("datasets", "sampled_data", "summary_data"))
  gc()
}

# Example usage
# Define file paths for one of the five-year groups (adjust paths accordingly)

generate_file_paths <- function(start_year, end_year, base_path) {
  years <- start_year:end_year
  file_paths <- lapply(years, function(year) {
    paste0(base_path, "/with_HPI_data_categories", year, ".csv")
  })
  return(unlist(file_paths))
}

# Assuming base_path is defined like this (adjust according to your directories):
base_path <- here::here("..", "..", "..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "with_hpi_lopnr", "2.filtered")



# Generate file paths for the period 2000-2004 as an example
file_paths_1995_1999 <- generate_file_paths(1995, 1999, base_path)
file_paths_2000_2004 <- generate_file_paths(2000, 2004, base_path)
file_paths_2005_2009 <- generate_file_paths(2005, 2009, base_path)
file_paths_2010_2014 <- generate_file_paths(2010, 2014, base_path)
file_paths_2015_2019 <- generate_file_paths(2015, 2019, base_path)
file_paths_2020_2021 <- generate_file_paths(2020, 2021, base_path)


# Call the function
process_datasets("1995-1999", file_paths_1995_1999)
process_datasets("2000-2004", file_paths_2000_2004)
process_datasets("2005-2009", file_paths_2005_2009)
process_datasets("2010-2014", file_paths_2010_2014)
process_datasets("2015-2019", file_paths_2015_2019)
process_datasets("2020-2021", file_paths_2020_2021)




```

# read summarized files

```{r}


# Define the directory where your summarized files are saved
directory_path_without <- here("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/without_hpi_lopnr/3.summarized")
directory_path_with <- here("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/with_hpi_lopnr/3.summarized")

# List all summary files in the directory
summary_files_without <- list.files(path = directory_path_without, pattern = "Summary_.*\\.csv", full.names = TRUE)
summary_files_with <- list.files(path = directory_path_with, pattern = "Summary_.*\\.csv", full.names = TRUE)
# Read in all summary files, add a 'YearGroup' column, and bind them into one dataframe
all_summarized_data <- 
  bind_rows(
  summary_files_without %>%
  map_df(~{
    year_group <- str_extract(basename(.x), "\\d{4}-\\d{4}|\\d{4}-\\d{2}") # Extracts year group from the filename
    
    read_csv(.x) %>%
      mutate(YearGroup = year_group,
             data = "without_HPI") 
  }),

summary_files_with %>%
  map_df(~{
    year_group <- str_extract(basename(.x), "\\d{4}-\\d{4}|\\d{4}-\\d{2}") # Extracts year group from the filename
    
    read_csv(.x) %>%
      mutate(YearGroup = year_group,
             data = "with_HPI")
  })
)

all_summarized_data %>% 
  pivot_wider(names_from =  data , values_from = c(n, Value)) %>% 
  mutate(diff = Value_with_HPI - Value_without_HPI,
         rel_diff = Value_with_HPI/Value_without_HPI,
         vars = str_c(Variable, Categories, sep = " ")) %>% 
 mutate(
    Variable = factor(Variable, levels = c("AgeGroup", "Sex", "BirthPlace", "EducationLevel", "IncomeLevel", "Income_Sources_Category", "InstitutionCategory", "KommunSize",  "MarriedOrPartner",
                                           "Ssyk_majorlevel", "SNI_group",  "Number_of_employees_Category",  "Lon_Foretag", "LoneInk_grupp", "net_sales_category", "operating_profit_category", "Turnover_Rate_Category",   "Turnover_Rate_Percent")),
    Categories = case_when(
      Variable == "AgeGroup" ~ fct_relevel(Categories, "18-35", "36-50", "51-65", ">65"),
      Variable == "BirthPlace" ~ fct_relevel(Categories, "Sweden", "Europe", "Outside Europe", "NA"),
      Variable == "EducationLevel" ~ fct_relevel(Categories, "Primary", "Secondary", "Tertiary <2 years", "Higher Education", "NA"),
      Variable == "IncomeLevel" ~ fct_relevel(Categories, "<60%", "60‚Äì79%", "80‚Äì119%", "120‚Äì199%", "‚â•200%"),
      Variable == "Income_Sources_Category" ~ fct_relevel(Categories, "No Income Sources", "Single Income Source", "Multiple Income Sources: 2-3", "Diverse Income Sources: 4-5", "Highly Diverse Income Sources: 6+"),
      Variable == "InstitutionCategory" ~ fct_relevel(Categories, "Offentligt", "Privat"),
      Variable == "KommunSize" ~ fct_relevel(Categories, "rural_municipalities", "dense_municipalities", "metropolitan_municipalities", "NA"),
      Variable == "Lon_Foretag" ~ fct_relevel(Categories, "<60%", "60‚Äì79%", "80‚Äì119%", "120‚Äì199%", "‚â•200%", "NA"),
      Variable == "LoneInk_grupp" ~ fct_relevel(Categories, "<60%", "60‚Äì79%", "80‚Äì119%", "120‚Äì199%", "‚â•200%"),
      Variable == "MarriedOrPartner" ~ fct_relevel(Categories, "Single", "Partner", "NA"),
      Variable == "Number_of_employees_Category" ~ fct_relevel(Categories, "Micro-Enterprises: 1-9 employees", "Small Enterprises: 10-49 employees", "Medium-Sized Enterprises: 50-249 employees", "Large Enterprises: 250+ employees", "NA"),
      Variable == "Sex" ~ fct_relevel(Categories, "1", "2"),
      Variable == "Turnover_Rate_Category" ~ fct_relevel(Categories, "No Turnover", "Very Low Turnover (0.1-1.0)", "Low Turnover (1.1-2.0)", "Moderate Turnover (2.1-5.0)", "High Turnover (5.1-10.0)", "Very High Turnover (10.1-20.0)", "Extremely High Turnover (20.1+)", "NA"),
      Variable == "Turnover_Rate_Percent" ~ fct_relevel(Categories, "Mean", "NA Count"),
      Variable == "net_sales_category" ~ fct_relevel(Categories, "<60%", "60‚Äì79%", "80‚Äì119%", "120‚Äì199%", "‚â•200%", "NA"),
      Variable == "operating_profit_category" ~ fct_relevel(Categories, "<60%", "60‚Äì79%", "80‚Äì119%", "120‚Äì199%", "‚â•200%", "NA"),
      # For SNI_group and others, apply specific ordering if needed
      # Variable == "SNI_group" ~ fct_relevel(Categories, !!!SNI_group_order),
      TRUE ~ as.factor(Categories)  # Default case for other variables not explicitly handled
  )) %>%
  drop_na() %>% 
  ggplot(aes(x=diff, y=vars, color = Variable)) +
  geom_col()+
  facet_wrap(~YearGroup,  ncol = 6)

# Optionally, you can write this combined dataset to a new CSV file
write_csv(all_summarized_data, path = file.path(directory_path, "Combined_Summary_All_Periods.csv"))

```
# plot

```{r}

library(statebins)
library(ggtext)
library(patchwork)
library(sysfonts)
library(showtextdb)
library(showtext)
library(ggchicklet)
library(scales) # For label_percent

# Load fonts --------------------------------------------------------------

font_add_google("Ubuntu", "ubuntu")
showtext_auto()

bg_col <- "white"
text_col <- "black"
body_font <- "ubuntu"
title_font <- "ubuntu"




ggplot(aes(x=diff, y=vars, color = Variable)) +
  geom_col()+
  facet_wrap(~YearGroup,  ncol = 6)
# Extract the colors from the 'lipari' palette
# colors <- scico::scico(n = n_colors, palette = 'lipari')
# n_colors <- 9
# 
# c("#364B9A", "#4A7BB7", "#6EA6CD", "#98CAE1", "#C2E4EF", "white", "#FEDA8B", "#FDB366", "#F67E4B", "#DD3D2D", "#A50026")
# # Print the colors
# colors
# "#021326" "#1E4368" "#5C5D78" "#89606E" "#C2655F" "#EA8D6B" "#E6BC91" "#FDF4D9"
#  "#021326" "#173D60" "#515A79" "#775E72" "#FDF4D9"  "#E6C398" "#E99973" "#D86E5D" "#A36267" 
#  
custom_order <- c(
  # AgeGroup order
  "AgeGroup 18-35", "AgeGroup 36-50", "AgeGroup 51-65", "AgeGroup >65",
  # Sex order
  "Sex 1", "Sex 2",
  # BirthPlace order
  "BirthPlace Sweden", "BirthPlace Europe", "BirthPlace Outside Europe", "BirthPlace NA",
  # EducationLevel order
  "EducationLevel Primary", "EducationLevel Secondary", "EducationLevel Tertiary <2 years", "EducationLevel Higher Education", "EducationLevel NA",
  # IncomeLevel order
  "IncomeLevel <60%", "IncomeLevel 60‚Äì79%", "IncomeLevel 80‚Äì119%", "IncomeLevel 120‚Äì199%", "IncomeLevel ‚â•200%",
  # Income_Sources_Category order
  "Income_Sources_Category No Income Sources", "Income_Sources_Category Single Income Source", "Income_Sources_Category Multiple Income Sources: 2-3", "Income_Sources_Category Diverse Income Sources: 4-5", "Income_Sources_Category Highly Diverse Income Sources: 6+",
  # InstitutionCategory order
  "InstitutionCategory Offentligt", "InstitutionCategory Privat",
  # KommunSize order
  "KommunSize rural_municipalities", "KommunSize dense_municipalities", "KommunSize metropolitan_municipalities", "KommunSize NA",
  # MarriedOrPartner order
  "MarriedOrPartner Single", "MarriedOrPartner Partner", "MarriedOrPartner NA",
  # Number_of_employees_Category order
  "Number_of_employees_Category Micro-Enterprises: 1-9 employees", "Number_of_employees_Category Small Enterprises: 10-49 employees", "Number_of_employees_Category Medium-Sized Enterprises: 50-249 employees", "Number_of_employees_Category Large Enterprises: 250+ employees", "Number_of_employees_Category NA",
  # Lon_Foretag order (Assuming similar to IncomeLevel for illustration)
  "Lon_Foretag <60%", "Lon_Foretag 60‚Äì79%", "Lon_Foretag 80‚Äì119%", "Lon_Foretag 120‚Äì199%", "Lon_Foretag ‚â•200%", "Lon_Foretag NA",
  # LoneInk_grupp order (Assuming similar to IncomeLevel for illustration)
  "LoneInk_grupp <60%", "LoneInk_grupp 60‚Äì79%", "LoneInk_grupp 80‚Äì119%", "LoneInk_grupp 120‚Äì199%", "LoneInk_grupp ‚â•200%"
  # Additional categories for other variables should be added here following the same pattern.
  
  # For variables like SNI_group, Ssyk_majorlevel, and others with specific categories not listed, you would add them in a similar fashion, ensuring each unique combination of Variable and Categories is represented.
)


custom_order_categories <- c(
  "18-35", "36-50", "51-65", ">65", # AgeGroup
  "Men", "Women", # Sex, assuming 1 for Male and 2 for Female for illustration
  "Sweden", "Europe", "Outside Europe",  # BirthPlace
  "Primary", "Secondary", "Tertiary <2 years", "Higher Education",# EducationLevel
  "<60%", "60‚Äì79%", "80‚Äì119%", "120‚Äì199%", "‚â•200%", # IncomeLevel
  "No Income Sources", "Single Income Source", "Multiple Income Sources: 2-3", "Diverse Income Sources: 4-5", "Highly Diverse Income Sources: 6+", # Income_Sources_Category
  "Offentligt", "Privat", # InstitutionCategory
  "rural_municipalities", "dense_municipalities", "metropolitan_municipalities",  # KommunSize
  "Single", "Partner",  # MarriedOrPartner
  "Micro-Enterprises: 1-9 employees", "Small Enterprises: 10-49 employees", "Medium-Sized Enterprises: 50-249 employees", "Large Enterprises: 250+ employees", # Number_of_employees_Category
  # SSYK real names with numbers
  "0 Military", "1 Managers", "2 Professionals", "3 Technicians and associate professionals", "4 Clerical support workers", "5 Service and sales workers", "6 Skilled agricultural, forestry and fishery workers", "7 Craft and related trades workers", "8 Plant and machine operators, and assemblers", "9 Elementary occupations",  # SSYK levels
  # Educated guess for SNI order based on typical industry classifications
  "Agriculture, forestry and fishing", "Mining and quarrying", "Manufacturing", "Electricity, gas, steam and air conditioning supply", "Water supply; sewerage, waste management and remediation activities", "Construction", "Wholesale and retail trade; repair of motor vehicles and motorcycles", "Transportation and storage", "Accommodation and food service activities", "Information and communication", "Financial and insurance activities", "Real estate activities", "Professional, scientific and technical activities", "Administrative and support service activities", "Public administration and defence; compulsory social security", "Education", "Human health and social work activities", "Arts, entertainment and recreation", "Other service activities", "Activities of household employers; undifferentiated goods- and services-producing activities of households for own use", "Activities of extraterritorial organizations and bodies", "NA" # SNI groups
)

bins_plot_data <-
  all_summarized_data %>% 
    pivot_wider(names_from =  data , values_from = c(n, Value)) %>% 
  mutate(
    diff_absolute = Value_with_HPI - Value_without_HPI,
    diff_relative_ratio = round(Value_with_HPI/Value_without_HPI,2), # as a ratio
    diff_relative_percent = (Value_with_HPI - Value_without_HPI) / Value_without_HPI * 100, 
          diff_percent = label_percent(accuracy = 0.1)(diff_absolute / 100), # Convert diff to percentage and format
    diff_relative_percent_label = label_percent(accuracy = 0.1)(diff_relative_percent / 100),
    Categories = case_when(
      Variable == "Sex" & Categories == "1" ~ "Men",
      Variable == "Sex" & Categories == "2" ~ "Women",
      Variable == "Ssyk_majorlevel" & Categories == "0" ~ "0 Military",
      Variable == "Ssyk_majorlevel" & Categories == "1" ~ "1 Managers",
      Variable == "Ssyk_majorlevel" & Categories == "2" ~ "2 Professionals",
      Variable == "Ssyk_majorlevel" & Categories == "3" ~ "3 Technicians and associate professionals",
      Variable == "Ssyk_majorlevel" & Categories == "4" ~ "4 Clerical support workers",
      Variable == "Ssyk_majorlevel" & Categories == "5" ~ "5 Service and sales workers",
      Variable == "Ssyk_majorlevel" & Categories == "6" ~ "6 Skilled agricultural, forestry and fishery workers",
      Variable == "Ssyk_majorlevel" & Categories == "7" ~ "7 Craft and related trades workers",
      Variable == "Ssyk_majorlevel" & Categories == "8" ~ "8 Plant and machine operators, and assemblers",
      Variable == "Ssyk_majorlevel" & Categories == "9" ~ "9 Elementary occupations",
    # Add more mappings as needed for SNI or other categories
    TRUE ~ Categories  # Default case to keep existing values as they are
  ), 
  vars = str_c(Variable, Categories, sep = " "),
 Variable = factor(Variable, levels = c("AgeGroup", "Sex", "BirthPlace", "EducationLevel", "IncomeLevel", "Income_Sources_Category", "InstitutionCategory", "KommunSize",  "MarriedOrPartner",
                                           "Ssyk_majorlevel", "SNI_group",  "Number_of_employees_Category",  "Lon_Foretag", "LoneInk_grupp", "net_sales_category", "operating_profit_category", "Turnover_Rate_Category",   "Turnover_Rate_Percent")),
Categories = factor(Categories, levels = custom_order_categories)) %>% 
  drop_na() %>% 
  mutate(text_color = if_else(diff_relative_percent < -60, "white", "black"))
  
  diff = diff_relative_ratio
  label_diff = diff_relative_ratio
  # Plot
  
  
  
  
  
  bins_plot <-
  bins_plot_data %>% 
  ggplot(
   aes(x = YearGroup, y = Categories, fill = diff_relative_percent)
   ) +
  statebins:::geom_rtile(
    radius = unit(3, "pt"),
  #  position = position_dodge(1),
   height =.95, 
   width = .95
  ) +
   geom_text(aes(label = diff_relative_percent_label,  color = text_color)) +
  # scico::scale_fill_scico(palette = 'lipari') +
  # 
  # scale_fill_gradientn(colors = c(  "#ca9b1a", "#e3b44a", "#f5cc79", "#fae3ac", "#fdf1d6",
  # "white",
  # "#c4e2e1", "#88d4d2", "#4bc6c3", "#1ebbbf", "#189a91"),
  # values = scales::rescale(c(-1, 0, 1))) +
  
    scale_fill_gradientn(colors = c("#003B46", "#07575B", "#66A5AD", "#C4DFE6", "#E6F1F5", "#FFD1AA", "#FFA07A", "#F08030"),
  values = scales::rescale(c(-1, 0, 1))) +
      scale_color_identity() + # Use the color identity scale to apply the colors directly
  scale_x_discrete(labels = c("95-99", "00-04", "05-09", "10-14", "15-19", "20-21"),
                   position = "top",
                   guide = guide_axis(n.dodge = 2)) + 
  #coord_fixed() +
  ggforce::facet_col(~Variable, 
                     scales = 'free_y', 
                     space = 'free',
                     strip.position = 'top')+
  #facet_wrap(~group, ncol = 1, scales = "free_y") +
  #theme_void(base_size = 32, base_family = "Oficial") +

  theme(
   # aspect.ratio = .2,
    
    legend.position = "bottom",
    plot.background = element_rect(fill = bg_col, colour = bg_col),
    panel.background = element_rect(fill = bg_col, colour = bg_col),
    panel.grid.major = element_blank(), 
    panel.grid.minor = element_blank(),
    axis.title = element_blank(),
    axis.text.y = element_text(colour = text_col,
                               hjust = 1,
                               margin = margin(r = 0),
                               angle=0),
    axis.text.x = element_text(colour = text_col,
                               hjust = .5,
                               margin = margin(r = 0),
                               angle=0),
    axis.line.x = element_line(),
    axis.ticks.x = element_line(),
    plot.title.position = "plot",
    plot.caption.position = "plot",
    strip.text = element_text(face = "bold", color = "grey10", 
                              size = 10,
                              hjust = 0,
                              margin = margin(t = 0, r = 0, b = 0, l = 0)),
    strip.background = element_rect(fill = "white", color = "white"),
    plot.margin = margin(t=10, r=-0, b=10, l=0),
    plot.title = element_textbox_simple(
      colour = text_col,
      hjust = 0.5,
      halign = 0,
      size = rel(1.8),
      face = "bold",
      margin = margin(b = 10, t = 10),
      lineheight = 0.5#,
      #family = body_font
    )
  )
ggsave("plotscbpopulation_reldiff_percent.pdf", height = 20, width = 10)
ggsave("plotscbpopulation_reldiff.pdf", height = 20, width = 10)

ggsave("plotscbpopulation.pdf", height = 20, width = 10)

c("#5B92E5", "#A1C4F5", "#DCE4F6", "#FFFFFF", "#FFD1AA", "#FFA07A", "#F06030")
c("#9B59D0", "#C2A5DE", "#E1D3EC", "#F2F2F2", "#C5E1A5", "#9CCC65", "#7CB342")
c("#35978F", "#79BFA1", "#B8E2C8", "#E6F2E4", "#FFF2AC", "#FFD966", "#FFC107")
c("#003B46", "#07575B", "#66A5AD", "#C4DFE6", "#FFD1AA", "#FFA07A", "#F08030")
c("#003B46", "#07575B", "#66A5AD", "#C4DFE6", "#E6F1F5", "#FFD1AA", "#FFA07A", "#F08030")

c("#8C564B", "#C49C94", "#E4D6C3", "#F7F7F7", "#C7E9C0", "#A1D99B", "#74C476")
c("#7B3294", "#C2A5CF", "#F7F7F7", "#FFF7BC", "#FDBB84", "#E34A33")


c("#173D60", "#515A79" ,"#775E72", "#FDF4D9", "#E6C398", "#E99973", "#A36267") 


```


# Function 5 over and underreached without HPI data

```{r}







calculate_percentages_for_groups <- function(df, group_vars) {
  df %>%
    select(all_of(group_vars)) %>%
    group_by(across(all_of(group_vars))) %>%
    summarize(n = n(), .groups = "drop") %>%
    mutate(Percent = 100 * n / sum(n))
}



process_datasets <- function(year_group, file_paths) {
  # Load the necessary libraries
  library(dplyr)
  library(purrr)

  # 1. Read in the datasets and select relevant columns
  datasets <- map_df(file_paths, ~read_csv(.x) %>%
                      select(LopNr, AgeGroup, Sex, 
                             EducationLevel, Ssyk_majorlevel, InstitutionCategory))
  
  # 2. Set seed for reproducibility
  set.seed(123)
  
  # 3. Randomly sample one of each LopNr
  sampled_data <- datasets %>%
    group_by(LopNr) %>%
    sample_n(1) %>%
    ungroup()

  # 4. Calculate percentages for groups
  group_vars <- c("AgeGroup", "Sex", "EducationLevel", "Ssyk_majorlevel", "InstitutionCategory")
  percentage_df <- calculate_percentages_for_groups(sampled_data, group_vars)

  # 5. Save the dataset
  path_output <- here("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/without_hpi_lopnr/4.summarized_within_groups", str_glue("{year_group}.csv"))
  write_csv(percentage_df, path_output)
  
  # 6. Clear memory
  rm(list = c("datasets", "sampled_data", "percentage_df"))
  gc()
}



generate_file_paths <- function(start_year, end_year, base_path) {
  years <- start_year:end_year
  file_paths <- lapply(years, function(year) {
    paste0(base_path, "/without_HPI_data_categories", year, ".csv")
  })
  return(unlist(file_paths))
}

# Assuming base_path is defined like this (adjust according to your directories):
base_path <- here::here("..", "..", "..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306",  "without_hpi_lopnr","2.filtered")



# Generate file paths for the period 2000-2004 as an example
file_paths_2016_2021 <- generate_file_paths(2017, 2021, base_path)


# Call the function
process_datasets("2017-2021", file_paths_2016_2021)




```

# Function 6 over and underreached with HPI data

```{r}







calculate_percentages_for_groups <- function(df, group_vars) {
  df %>%
    select(all_of(group_vars)) %>%
    group_by(across(all_of(group_vars))) %>%
    summarize(n = n(), .groups = "drop") %>%
    mutate(Percent = 100 * n / sum(n))
}



process_datasets <- function(year_group, file_paths) {
  # Load the necessary libraries
  library(dplyr)
  library(purrr)

  # 1. Read in the datasets and select relevant columns
  datasets <- map_df(file_paths, ~read_csv(.x) %>%
                      select(LopNr, AgeGroup, Sex, 
                             EducationLevel, Ssyk_majorlevel, InstitutionCategory))
  
  # 2. Set seed for reproducibility
  set.seed(123)
  
  # 3. Randomly sample one of each LopNr
  sampled_data <- datasets %>%
    group_by(LopNr) %>%
    sample_n(1) %>%
    ungroup()

  # 4. Calculate percentages for groups
  group_vars <- c("AgeGroup", "Sex", "EducationLevel", "Ssyk_majorlevel", "InstitutionCategory")
  percentage_df <- calculate_percentages_for_groups(sampled_data, group_vars)

  # 5. Save the dataset
  path_output <- here("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/with_hpi_lopnr/4.summarized_within_groups", str_glue("{year_group}.csv"))
  write_csv(percentage_df, path_output)
  
  # 6. Clear memory
  rm(list = c("datasets", "sampled_data", "percentage_df"))
  gc()
}



generate_file_paths <- function(start_year, end_year, base_path) {
  years <- start_year:end_year
  file_paths <- lapply(years, function(year) {
    paste0(base_path, "/with _HPI_data_categories", year, ".csv")
  })
  return(unlist(file_paths))
}

# Assuming base_path is defined like this (adjust according to your directories):
base_path <- here::here("..", "..", "..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306",  "with_hpi_lopnr","2.filtered")



# Generate file paths for the period 2000-2004 as an example
file_paths_2016_2021 <- generate_file_paths(2017, 2021, base_path)


# Call the function
process_datasets("2017-2021", file_paths_2016_2021)




```


```{r}

# Define the directory where your summarized files are saved
without <- read_csv(here("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/without_hpi_lopnr/4.summarized_within_groups/2017-2021.csv"))
with <- read_csv(here("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/with_hpi_lopnr/4.summarized_within_groups/2017-2021.csv"))


comb <- with %>% left_join(without, by = join_by(AgeGroup ,  Sex ,EducationLevel  , Ssyk_majorlevel ,InstitutionCategory)) %>% 
  mutate(diff=Percent.x-Percent.y) %>% arrange(diff) %>% 
  mutate(
    AgeGroup = as.character(AgeGroup),
    Sex = as.character(Sex),
    EducationLevel = as.character(EducationLevel),
    Ssyk_majorlevel = as.character(Ssyk_majorlevel),
    InstitutionCategory = as.character(InstitutionCategory)
  ) %>% 
  mutate(
    Age_sex_education_occupation_institution = str_c(
      if_else(is.na(AgeGroup), "", AgeGroup), 
      if_else(is.na(Sex), "", Sex), 
      if_else(is.na(EducationLevel), "", EducationLevel), 
      if_else(is.na(Ssyk_majorlevel), "", Ssyk_majorlevel), 
      if_else(is.na(InstitutionCategory), "", InstitutionCategory), 
      sep = "-"
    )
  )

bind_rows(
comb %>% 
  slice_min(order_by = diff, n = 30) %>% mutate(value="1smallest"),
comb %>% 
  slice_max(order_by = diff, n = 30) %>% mutate(value="2largest")
) %>% 
    mutate(Age_sex_education_occupation_institution = factor(Age_sex_education_occupation_institution, levels = unique(Age_sex_education_occupation_institution[order(diff)]))) %>% 

  ggplot(aes(x=diff, y= Age_sex_education_occupation_institution,  fill = diff))+
  geom_col() +
  facet_wrap(~value, scales = "free_x") +
   labs(title = "Age, Sex, Education, Occupation, Institution", fill = "Diff", x= "Percentage point difference") + 
   scale_fill_gradientn(colors = c("steelblue4", "lightblue", "gold4")) +  
  theme_minimal()

ggsave("combodiff.pdf", height = 8, width = 5)
```



# make variables

```{r}
glimpse(scb_2012)


# SNI 


# SSYK - use first variable that starts with Ssyk
 scb_2012 %>%
  mutate(
    SSYK_majorlevel = as.numeric(str_extract(.[[grep("^Ssyk3", names(.))[[1]]]], "^\\d"))#,
    #across(.cols = -SSYK_majorlevel)  # Placeholder for future transformations
  ) %>%
  select(SSYK_majorlevel)
# selects all  Ssyk variables
# x<-  scb_2012 %>%
#    mutate(across(starts_with("Ssyk3"), ~as.numeric(str_extract(., "^\\d")), .names = "temp_{.col}")) %>%  select(starts_with("temp_"))


  
# education

scb_2012 %>%
  mutate(
    EducationLevel = if ("Sun2000niva_old" %in% names(.)) {
      case_when(
        Sun2000niva_old %in% c("1", "2") ~ "Primary",
        Sun2000niva_old %in% c("3", "4") ~ "Secondary",
        Sun2000niva_old == "5" ~ "Tertiary <2 years",
        Sun2000niva_old %in% c("6", "7") ~ "Higher Education",
        TRUE ~ NA_character_
      )
    } else if ("Sun2020niva_old" %in% names(.)) {
      case_when(
        Sun2020niva_old %in% c("1", "2") ~ "Primary",
        Sun2020niva_old %in% c("3", "4") ~ "Secondary",
        Sun2020niva_old == "5" ~ "Tertiary <2 years",
        Sun2020niva_old %in% c("6", "7") ~ "Higher Education",
        TRUE ~ NA_character_
      )
    } else NA_character_
  )%>%  select(EducationLevel) %>% count(EducationLevel)

# as numeric
# scb_2012 %>%
#   mutate(
#     EducationLevel = if ("Sun2000niva_old" %in% names(.)) {
#       case_when(
#         as.numeric(Sun2000niva_old) %in% 1:2 ~ "Primary",
#         as.numeric(Sun2000niva_old) %in% 3:4 ~ "Secondary",
#         as.numeric(Sun2000niva_old) == 5 ~ "Tertiary <2 years",
#         as.numeric(Sun2000niva_old) %in% 6:7 ~ "Higher Education",
#         TRUE ~ NA_character_
#       )
#     } else if ("Sun2020niva_old" %in% names(.)) {
#       case_when(
#         as.numeric(Sun2020niva_old) %in% 1:2 ~ "Primary",
#         as.numeric(Sun2020niva_old) %in% 3:4 ~ "Secondary",
#         as.numeric(Sun2020niva_old) == 5 ~ "Tertiary <2 years",
#         as.numeric(Sun2020niva_old) %in% 6:7 ~ "Higher Education",
#         TRUE ~ NA_character_
#       )
#     } else NA_character_
#   )

# SyssStat


# Instkod

scb_2012 %>%
  mutate(
    InstitutionCategory = if ("InstKod" %in% names(.)) {
      case_when(
        substr(InstKod, 3, 3) %in% c("1", "2") ~ "Offentligt",
        TRUE ~ "Privat"
      )
    } else if ("InstKod6" %in% names(.)) {
      case_when(
        substr(InstKod6, 4, 4) %in% c("1", "2") ~ "Offentligt",
        TRUE ~ "Privat"
      )
    } else if ("InstKod7" %in% names(.)) {
      case_when(
        substr(InstKod7, 4, 5) %in% c("10", "20", "30") ~ "Offentligt",
        TRUE ~ "Privat"
      )
    } else if ("InstKod10" %in% names(.)) {
      case_when(
        substr(InstKod7, 7, 8) %in% c("10", "20", "30") ~ "Offentligt",
        TRUE ~ "Privat"
      )
    } else {
      NA_character_
    }
  )%>%
  select(InstitutionCategory)

# LonInk
scb_2021 %>% 
  mutate(
    Lon_Foretag = if ("LonFInk" %in% names(.)) {
      median_LoneFInk <- median(LonFInk, na.rm = TRUE)
      case_when(
        LonFInk >= 2 * median_LoneFInk ~ "‚â•200%",
        LonFInk >= 1.2 * median_LoneFInk & LonFInk < 2 * median_LoneFInk ~ "120‚Äì199%",
        LonFInk >= 0.8 * median_LoneFInk & LonFInk < 1.2 * median_LoneFInk ~ "80‚Äì119%",
        LonFInk >= 0.6 * median_LoneFInk & LonFInk < 0.8 * median_LoneFInk ~ "60‚Äì79%",
        LonFInk < 0.6 * median_LoneFInk ~ "<60%",
        TRUE ~ NA_character_
      )
    } else if ("ArsLonFInk" %in% names(.)) {
      median_ArsLonFInk <- median(ArsLonFInk, na.rm = TRUE)
      case_when(
        ArsLonFInk >= 2 * median_ArsLonFInk ~ "‚â•200%",
        ArsLonFInk >= 1.2 * median_ArsLonFInk & ArsLonFInk < 2 * median_ArsLonFInk ~ "120‚Äì199%",
        ArsLonFInk >= 0.8 * median_ArsLonFInk & ArsLonFInk < 1.2 * median_ArsLonFInk ~ "80‚Äì119%",
        ArsLonFInk >= 0.6 * median_ArsLonFInk & ArsLonFInk < 0.8 * median_ArsLonFInk ~ "60‚Äì79%",
        ArsLonFInk < 0.6 * median_ArsLonFInk ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_
  ) %>%  select(Lon_Foretag)


scb_2012 %>% select(Ftg_Rorelseresultat)
  mutate(
    net_sales_category = if ("Ftg_Nettoomsattning" %in% names(.)) {
      median_Ftg_Nettoomsattning <- median(Ftg_Nettoomsattning, na.rm = TRUE)
      case_when(
        Ftg_Nettoomsattning >= 2 * median_Ftg_Nettoomsattning ~ "‚â•200%",
        Ftg_Nettoomsattning >= 1.2 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 2 * median_Ftg_Nettoomsattning ~ "120‚Äì199%",
        Ftg_Nettoomsattning >= 0.8 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 1.2 * median_Ftg_Nettoomsattning ~ "80‚Äì119%",
        Ftg_Nettoomsattning >= 0.6 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 0.8 * median_Ftg_Nettoomsattning ~ "60‚Äì79%",
        Ftg_Nettoomsattning < 0.6 * median_Ftg_Nettoomsattning ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_
  ) %>% select(IncomeCategory)
  
  
  scb_2012 %>%
  mutate(
    operating_profit_category = if ("Ftg_Rorelseresultat" %in% names(.)) {
      # Directly using median in case_when conditions
      case_when(
        Ftg_Rorelseresultat >= 2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "‚â•200%",
        Ftg_Rorelseresultat >= 1.2 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "120‚Äì199%",
        Ftg_Rorelseresultat >= 0.8 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 1.2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "80‚Äì119%",
        Ftg_Rorelseresultat >= 0.6 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 0.8 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "60‚Äì79%",
        Ftg_Rorelseresultat < 0.6 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_
  )

  # Assuming 'translation_key_df' is your data frame containing the translation key





























 translation_key_df <-
openxlsx::read.xlsx(here::here(str_glue("../../../HPI (DNR XXXXXX)/Data HPI registeruttag 2023/SCB/Leverans/Leverans_20240306/translation_SNI-versions.xlsx"))) %>% as_tibble() %>% 
   select(version, huvudgrupp_original, avdelning_samstammig, ben√§mning_engelska_samstammig)

# Adjust the translation key dataframe to include a uniform identifier for joining
translation_key_df <- translation_key_df %>%
  mutate(
    join_key = str_c(version, str_pad(huvudgrupp_original, width = 2, pad = "0"))
  )

# Prepare the main dataframe for joining by creating a similar join key
scb_2021 %>%
  mutate(
    AstSNI2007 = if("AstSNI2007" %in% names(.)) as.character(AstSNI2007) else NA_character_,
    AstSNI2002 = if("AstSNI2002" %in% names(.)) as.character(AstSNI2002) else NA_character_,
    AstSNI92 = if("AstSNI92" %in% names(.)) as.character(AstSNI92) else NA_character_) %>% 
  mutate(
    join_key = case_when(
      if("AstSNI2007" %in% names(.)) !is.na(AstSNI2007) ~ str_c("AstSNI2007", substr(AstSNI2007, 1, 2)),
      if("AstSNI2002" %in% names(.)) !is.na(AstSNI2002) ~ str_c("AstSNI2002", substr(AstSNI2002, 1, 2)),
      if("AstSNI92" %in% names(.)) !is.na(AstSNI92) ~ str_c("AstSNI92", substr(AstSNI92, 1, 2)),
      TRUE ~ NA_character_
    )
  ) %>% left_join(translation_key_df, by = "join_key") %>%  select(join_key)










 
 

```
AstSNI2007
AstSNI2002
AstSNI92

# ast
```{r}
scb_2021 %>%
  mutate(
    AstSNI2007 = if("AstSNI2007" %in% names(scb_2021)) as.character(AstSNI2007) else NA_character_,
    AstSNI2002 = if("AstSNI2002" %in% names(scb_2021)) as.character(AstSNI2002) else NA_character_,
    AstSNI92 = if("AstSNI92" %in% names(scb_2021)) as.character(AstSNI92) else NA_character_
  ) %>%
  rowwise() %>% # Ensure that the operations are performed row by row
  mutate(
    join_key = case_when(
      !is.na(AstSNI2007) ~ str_c("AstSNI2007_", substr(AstSNI2007, 1, 2)),
      !is.na(AstSNI2002) ~ str_c("AstSNI2002_", substr(AstSNI2002, 1, 2)),
      !is.na(AstSNI92) ~ str_c("AstSNI92_", substr(AstSNI92, 1, 2)),
      TRUE ~ NA_character_
    )
  ) %>%
  ungroup() %>%
  left_join(translation_key_df, by = c("join_key" = "join_key_column_in_translation_df"))

```


AntalSys
Vissa kategorier anst√§llda kan inte kopplas till ett faktiskt arbetsst√§lle (med
CFAR-nummer som identitet). F√∂r dessa individer redovisas ingen uppgift
(variabeln=0).

SUN2000Niva_Old
SUN2020Niva_Old


AntAns
LoneInk
AstSNI2007
Ftg_Nettoomsattning
Ftg_Rorelseresultat
PersOms_Harledd

InstKod 
(1990‚Äì1998)
den tredje positionen anger
√§garkategori 
√Ñgarkategori (position 3)
1 Statlig
2 Kommunal
9 √ñvrig

InstKod6
den fj√§rde positionen anger
√§garkategori 
(1999‚Äì2000)


InstKod7
√Ñgarkontroll (position 4 och 5) 2001-
10 Statligt kontrollerade enheter
20 Kommunalt kontrollerade enheter
30 Landstingskontrollerade enheter
41 Privat svenskkontrollerade enheter utan koncerntillh√∂righet
42 Privat svenskkontrollerade enheter med koncerntillh√∂righet
50 Utlandskontrollerade enheter

Den institutionella sektorkoden √§r fr√•n och med 2014 10-st√§llig:
√Ñgarkontroll (position 7 och 8)
Kod: Ben√§mning:
10 Statligt kontrollerade enheter
20 Kommunalt kontrollerade enheter
30 Regionkontrollerade enheter
41 Privat svenskkontrollerade enheter utan
koncerntillh√∂righet
42 Privat svenskkontrollerade enheter med
koncerntillh√∂righet
50 Utlandskontrollerade enheter

AstSNI2007

SNI 2002, SNI 92, and SNI 2007

```{r}
e <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20241013","Leverans001", "eeb_lev_1990.excluded.csv"))

f <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20241013","Leverans001", "eeb_lev_1990.filtered.csv"))
```


```{r}

# Generate the sequence of years
years <- 1990:2023

# Base path template without the year
base_path <- here("HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20241013", "Leverans002", "eeb_lev_YEAR.sas7bdat")

# Generate file paths for each year by replacing "YEAR" with actual years
file_paths <- sapply(1995:2000, function(year) {
  sub("YEAR", year, base_path)
})

# Read all files and combine them into a single dataframe
combined_data <- map_df(file_paths, read_sas)



  mutate(Period = case_when(
    Year >= 1995 & Year < 2000 ~ "1995-1999",
    Year >= 2000 & Year < 2005 ~ "2000-2004",
    Year >= 2005 & Year < 2010 ~ "2005-2009",
    Year >= 2010 & Year < 2015 ~ "2010-2014",
    Year >= 2015 & Year < 2020 ~ "2015-2019",
    Year >= 2020 & Year <= 2023 ~ "2020-2023",
    TRUE ~ NA_character_  # For years outside the specified range
  )) 
```

Sammanr√§knad f√∂rv√§rvsinkomst (Total Earned Income): This typically refers to the total income an individual earns from employment and self-employment before taxes. It can include wages, salaries, bonuses, income from freelance work, and potentially other sources of earned income. The key characteristic of this income type is that it is aggregated from multiple sources, if applicable, and reflects the total income earned from labor or business activities.

Kontant bruttol√∂n, f√∂r samtliga anst√§llningar (Gross Cash Salary for All Employments): This refers specifically to the gross salary received in cash for all employment positions held by an individual. It includes all forms of cash compensation from employment, such as basic pay, overtime, bonuses, and allowances, before any deductions like taxes and social security contributions. This term emphasizes the cash component of the salary and the aggregation across all employments, without considering non-cash benefits or income from self-employment.

L√∂ne eller f√∂retagarinkomst f√∂r huvudsaklig syssels√§ttning (Wage or Business Income from Main Occupation): This term focuses on the income derived from an individual's primary occupation, whether it's from employment (wage) or self-employment/business activities (business income). The key aspect here is the source of the income being the main job or business venture of the individual, which could imply it's the most significant source of income, in terms of time invested or earnings, compared to other potential income-generating activities.

The main differences between these terms lie in the scope and source of the income they refer to:

Total Earned Income captures all earned income before taxes, from both employment and self-employment, making it the broadest measure.
Gross Cash Salary for All Employments is narrower, focusing only on cash earnings from employment and excludes income from self-employment and non-cash benefits.
Wage or Business Income from Main Occupation narrows the focus further to the primary source of income, distinguishing between wage income from employment and income from self-employment/business activities, but it doesn't aggregate income from secondary jobs or other minor sources.



```{r}


# data from tillv√§xtverket, another possibility could be skr
metropolitan_municipalities <- c("114", "123", "126", "127", "128", "136", "138", "139", "160", 
                                 "162", "163", "180", "181", "182", "183", "184", "186", "191", 
                                 "1230", "1231", "1262", "1280", "1281", "1402", "1480", "1481")

dense_municipalities <- c("115", "117", "120", "140", "187", "305", "330", "380", "381", "461", 
                          "480", "481", "483", "484", "486", "561", "562", "580", "581", "583", 
                          "584", "642", "643", "680", "682", "683", "686", "687", "760", "765", 
                          "780", "781", "880", "881", "882", "883", "884", "1060", "1080", "1082", 
                          "1233", "1261", "1263", "1272", "1275", "1282", "1277", "1282", "1283", 
                          "1285", "1286", "1287", "1290", "1292", "1380", 
                          "1382", "1401", "1407", "1440", "1441", "1472", "1482", "1484", "1485", 
                          "1486", "1487", "1488", "1489", "1490", "1492", "1493", "1494", "1495", 
                          "1496", "1497", "1498", "1499", "1715", "1761", "1780", "1781", "1782", 
                          "1784", "1785", "1862", "1880", "1881", "1883", "1884", "1907", "1960", 
                          "1961", "1980", "1981", "1982", "1983", "1984", "2062", "2080", "2081", 
                          "2085", "2104", "2180", "2181", "2262", "2280", "2281", "2380", "2523", "2580", "2581", 
                          "2582", "2583", "2584")

rural_municipalities <- c("125", "128", "188", "192", "319", "331", "360", "382", "428", "482", "488", "509", 
                          "512", "513", "560", "563", "580", "582", "586", "604", "617", "662", "665", 
                          "684", "685", "761", "763", "764", "767", "821", "834", "840", "860", "861", "862", "885", 
                          "980", "1081", "1083", "1214", "1256", "1257", "1260", "1264", "1265", 
                          "1266", "1267", "1270", "1273", "1276", "1278", "1284", "1291", "1293", "1315", 
                          "1381", "1383", "1384", "1415", "1419", "1421", "1427", "1430", "1435", 
                          "1438", "1439", "1442", "1443", "1444", "1445", "1446", "1447", "1452", 
                          "1460", "1461", "1462", "1463", "1465", "1466", "1491", "1470", "1471", "1473", 
                          "1730", "1737", "1760", "1762", "1763", "1764", "1765", "1766", "1783", "1814", 
                          "1860", "1861", "1863", "1864", "1882", "1885", "1904", "1962", "2021", 
                          "2023", "2026", "2029", "2031", 
                          "2034", "2039", "2061", "2082", "2083", "2084", "2101", "2121", "2132", 
                          "2161", "2182", "2183", "2184", "2260", "2282", "2283", "2284", "2303", 
                          "2305", "2309", "2313", "2321", "2326", "2361", "2401", "2403", "2404", 
                          "2409", "2417", "2418", "2421", "2422", "2425", "2460", "2462", "2463", 
                          "2480", "2481", "2482", "2505", "2506", "2510", "2513", "2514", "2518", 
                          "2521", "2560")





add_conditional_syssstat_filters <- function(data) {
  # Define the SyssStat* variables you're interested in
  columns_to_check <- c("SyssStatG", "SyssStat", "SyssStatJ", "SyssStat11", "SyssStat19")
  
  # Initialize a filter expression that is always true
  filter_expr <- expr(TRUE)
  
  # Dynamically update the filter expression based on column existence
  for (col in columns_to_check) {
    if (col %in% names(data)) {
      # Dynamically append the condition to the filter expression
      filter_expr <- expr(!!filter_expr & (!!sym(col) %in% c(1, 5)))
    }
  }
  
  # Apply the dynamic filter expression to the dataframe
  data %>% filter(!!filter_expr)
}



x <-
scb_2012 %>% 
left_join(grunduppgifter) %>% 
  mutate(
    Year = as.numeric(year), # Add the Year variable
    FodelseAr = as.numeric(FodelseAr),
    Age = Year - FodelseAr
  ) %>% 
  filter(Age > 17) %>%
  add_conditional_syssstat_filters() %>%
  mutate(
    AgeGroup = case_when(
      Age >= 18 & Age <= 35 ~ "18-35",
      Age > 35 & Age <= 50 ~ "36-50",
      Age > 50 & Age <= 65 ~ "51-65",
      TRUE ~ ">65"
    ),
    Sex = Kon,
    BirthPlace = case_when(
      FodelseLand_EU28 == "Sverige" ~ "Sweden",
      FodelseLand_EU28 %in% c("EU utom Norden", "Europa utom EU och Norden", "Norden utom Sverige") ~ "Europe",
      FodelseLand_EU28 %in% 'Ok√§nt'  ~ NA_character_,
      TRUE ~ "Outside Europe"
    ),
    MarriedOrPartner = case_when(
      Civil %in% c("G", "RP") ~ "Partner",  # Married or Registered Partner
      Civil %in% c("OG", "S", "√Ñ", "SP", "EP") ~ "Single",  # Other categories
      TRUE ~ NA_character_  # Assign NA to cases that do not match any condition
    ),
    KommunSize = case_when(
    Kommun %in% metropolitan_municipalities ~ "metropolitan_municipalities",
    Kommun %in% dense_municipalities ~ "dense_municipalities",
    Kommun %in% rural_municipalities ~ "rural_municipalities",
    TRUE ~ NA_character_
  ),
    EducationLevel = if ("Sun2000niva_old" %in% names(.)) {
        case_when(
          Sun2000niva_old %in% c("1", "2") ~ "Primary",
          Sun2000niva_old %in% c("3", "4") ~ "Secondary",
          Sun2000niva_old == "5" ~ "Tertiary <2 years",
          Sun2000niva_old %in% c("6", "7") ~ "Higher Education",
          TRUE ~ NA_character_
        )
      } else if ("Sun2020niva_old" %in% names(.)) {
        case_when(
          Sun2020niva_old %in% c("1", "2") ~ "Primary",
          Sun2020niva_old %in% c("3", "4") ~ "Secondary",
          Sun2020niva_old == "5" ~ "Tertiary <2 years",
          Sun2020niva_old %in% c("6", "7") ~ "Higher Education",
          TRUE ~ NA_character_
        )
      } else NA_character_,
    Ssyk_majorlevel = as.numeric(str_extract(.[[grep("^Ssyk3", names(.))[[1]]]], "^\\d"))
  ) %>% 
  mutate(
    IncomeLevel = case_when(
      CSFVI >= 2 * median(CSFVI, na.rm = TRUE) ~ "‚â•200%",
      CSFVI >= 1.2 * median(CSFVI, na.rm = TRUE) & CSFVI < 2 * median(CSFVI, na.rm = TRUE) ~ "120‚Äì199%",
      CSFVI >= 0.8 * median(CSFVI, na.rm = TRUE) & CSFVI < 1.2 * median(CSFVI, na.rm = TRUE) ~ "80‚Äì119%",
      CSFVI >= 0.6 * median(CSFVI, na.rm = TRUE) & CSFVI < 0.8 * median(CSFVI, na.rm = TRUE) ~ "60‚Äì79%",
      CSFVI < 0.6 * median(CSFVI, na.rm = TRUE) ~ "<60%",
      TRUE ~ NA_character_
    ),
    LoneInk_grupp = case_when(
      LoneInk >= 2 * median(LoneInk, na.rm = TRUE) ~ "‚â•200%",
      LoneInk >= 1.2 * median(LoneInk, na.rm = TRUE) & LoneInk < 2 * median(LoneInk, na.rm = TRUE) ~ "120‚Äì199%",
      LoneInk >= 0.8 * median(LoneInk, na.rm = TRUE) & LoneInk < 1.2 * median(LoneInk, na.rm = TRUE) ~ "80‚Äì119%",
      LoneInk >= 0.6 * median(LoneInk, na.rm = TRUE) & LoneInk < 0.8 * median(LoneInk, na.rm = TRUE) ~ "60‚Äì79%",
      LoneInk < 0.6 * median(LoneInk, na.rm = TRUE) ~ "<60%",
      TRUE ~ NA_character_
    )) %>% 
    # L√∂ne eller f√∂retagarinkomst f√∂r huvudsaklig syssels√§ttning
           mutate(    
             Lon_Foretag = if ("LonFInk" %in% names(.)) {
      median_LoneFInk <- median(LonFInk, na.rm = TRUE)
      case_when(
        LonFInk >= 2 * median_LoneFInk ~ "‚â•200%",
        LonFInk >= 1.2 * median_LoneFInk & LonFInk < 2 * median_LoneFInk ~ "120‚Äì199%",
        LonFInk >= 0.8 * median_LoneFInk & LonFInk < 1.2 * median_LoneFInk ~ "80‚Äì119%",
        LonFInk >= 0.6 * median_LoneFInk & LonFInk < 0.8 * median_LoneFInk ~ "60‚Äì79%",
        LonFInk < 0.6 * median_LoneFInk ~ "<60%",
        TRUE ~ NA_character_
      )
    } else if ("ArsLonFInk" %in% names(.)) {
      median_ArsLonFInk <- median(ArsLonFInk, na.rm = TRUE)
      case_when(
        ArsLonFInk >= 2 * median_ArsLonFInk ~ "‚â•200%",
        ArsLonFInk >= 1.2 * median_ArsLonFInk & ArsLonFInk < 2 * median_ArsLonFInk ~ "120‚Äì199%",
        ArsLonFInk >= 0.8 * median_ArsLonFInk & ArsLonFInk < 1.2 * median_ArsLonFInk ~ "80‚Äì119%",
        ArsLonFInk >= 0.6 * median_ArsLonFInk & ArsLonFInk < 0.8 * median_ArsLonFInk ~ "60‚Äì79%",
        ArsLonFInk < 0.6 * median_ArsLonFInk ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_,
    
    net_sales_category = if ("Ftg_Nettoomsattning" %in% names(.)) {
      median_Ftg_Nettoomsattning <- median(Ftg_Nettoomsattning, na.rm = TRUE)
      case_when(
        Ftg_Nettoomsattning >= 2 * median_Ftg_Nettoomsattning ~ "‚â•200%",
        Ftg_Nettoomsattning >= 1.2 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 2 * median_Ftg_Nettoomsattning ~ "120‚Äì199%",
        Ftg_Nettoomsattning >= 0.8 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 1.2 * median_Ftg_Nettoomsattning ~ "80‚Äì119%",
        Ftg_Nettoomsattning >= 0.6 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 0.8 * median_Ftg_Nettoomsattning ~ "60‚Äì79%",
        Ftg_Nettoomsattning < 0.6 * median_Ftg_Nettoomsattning ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_,
    
        operating_profit_category = if ("Ftg_Rorelseresultat" %in% names(.)) {
      # Directly using median in case_when conditions
      case_when(
        Ftg_Rorelseresultat >= 2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "‚â•200%",
        Ftg_Rorelseresultat >= 1.2 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "120‚Äì199%",
        Ftg_Rorelseresultat >= 0.8 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 1.2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "80‚Äì119%",
        Ftg_Rorelseresultat >= 0.6 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 0.8 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "60‚Äì79%",
        Ftg_Rorelseresultat < 0.6 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_,
    Number_of_employees_Category = case_when(
    Ast_AntalSys >= 1 & Ast_AntalSys <= 9 ~ "Micro-Enterprises: 1-9 employees",
    Ast_AntalSys >= 10 & Ast_AntalSys <= 49 ~ "Small Enterprises: 10-49 employees",
    Ast_AntalSys >= 50 & Ast_AntalSys <= 249 ~ "Medium-Sized Enterprises: 50-249 employees",
    Ast_AntalSys >= 250 ~ "Large Enterprises: 250+ employees",
    TRUE ~ NA_character_
           ),
    Income_Sources_Category = case_when(
    AntAns == 0 ~ "No Income Sources",
    AntAns == 1 ~ "Single Income Source",
    AntAns >= 2 & AntAns <= 3 ~ "Multiple Income Sources: 2-3",
    AntAns >= 4 & AntAns <= 5 ~ "Diverse Income Sources: 4-5",
    AntAns >= 6 ~ "Highly Diverse Income Sources: 6+",
    TRUE ~ NA_character_ # For handling NA values
  ),
  Turnover_Rate_Category = case_when(
    PersOms_Harledd == 0 ~ "No Turnover",
    PersOms_Harledd > 0 & PersOms_Harledd <= 1 ~ "Very Low Turnover (0.1-1.0)",
    PersOms_Harledd > 1 & PersOms_Harledd <= 2 ~ "Low Turnover (1.1-2.0)",
    PersOms_Harledd > 2 & PersOms_Harledd <= 5 ~ "Moderate Turnover (2.1-5.0)",
    PersOms_Harledd > 5 & PersOms_Harledd <= 10 ~ "High Turnover (5.1-10.0)",
    PersOms_Harledd > 10 & PersOms_Harledd <= 20 ~ "Very High Turnover (10.1-20.0)",
    PersOms_Harledd > 20 ~ "Extremely High Turnover (20.1+)",
    TRUE ~ "Unknown" # For handling NA or unexpected values
  ),
  Turnover_Rate_Percent = (PersOms_Harledd / Ast_AntalSys) * 100,
      Operating_Margin_Percent = ifelse(
      all(c("Ftg_Rorelseresultat", "Ftg_Nettoomsattning") %in% names(.)) & Ftg_Nettoomsattning != 0,
      (Ftg_Rorelseresultat / Ftg_Nettoomsattning) * 100,
      NA_real_ # Assign NA if Net Sales is zero or columns do not exist
    )
           )



calculate_percentages <- function(df, vars, group_var = NULL) {
  if (!is.null(group_var) && group_var %in% names(df)) {
    df %>%
      mutate(across(all_of(vars), as.character)) %>% # Ensure vars are characters
      select(.data[[group_var]], all_of(vars)) %>%
      pivot_longer(cols = -all_of(group_var), names_to = "Variable", values_to = "Categories") %>%
      group_by(.data[[group_var]], Variable, Categories) %>%
      summarize(n = n(), .groups = "drop_last") %>%
      group_by(.data[[group_var]], Variable) %>%
      mutate(Value = 100 * (n / sum(n))) %>%
      ungroup() %>%
      select(-sum) %>%
      rename(Value = Percent) # Ensure unified "Value" column for output
  } else {
    df %>%
      mutate(across(all_of(vars), as.character)) %>% # Ensure vars are characters
      pivot_longer(cols = all_of(vars), names_to = "Variable", values_to = "Categories") %>%
      count(Variable, Categories) %>%
      group_by(Variable) %>%
      mutate(Value = 100 * n / sum(n)) %>%
      ungroup()
  }
}


calculate_means <-  function(df, vars) {
  summaries <- lapply(vars, function(var) {
    total_count <- nrow(df)
    na_count <- sum(is.na(df[[var]]))
    non_na_count <- total_count - na_count
    mean_val <- mean(df[[var]], na.rm = TRUE)
    
    data.frame(
      Variable = rep(var, 2),
      #Categories = "", # Empty to match the desired format
      n = c(non_na_count, na_count), # Count of non-NA values for mean, and NA count
      Value = c(mean_val, NA), # Mean for non-NA, NA for the NA count row
      Categories = c("Mean", "NA Count") # Distinguishing between mean value and NA count
    ) %>% as_tibble()
  })
  
  do.call(rbind, summaries)
}


# Assuming 'sampled_data' is your data frame, and you've defined the variable lists
categorical_vars <- c("AgeGroup", "Sex", "BirthPlace", "MarriedOrPartner", 
                      "EducationLevel", "Ssyk_majorlevel", "IncomeLevel", "LoneInk_grupp", 
                      "Lon_Foretag", "net_sales_category", "operating_profit_category", 
                      "Number_of_employees_Category", "Income_Sources_Category", 
                      "Turnover_Rate_Category")
continuous_vars <- c("Turnover_Rate_Percent", "Operating_Margin_Percent")


summary_data <- bind_rows(
  calculate_percentages(x, categorical_vars),
  calculate_means(x, continuous_vars)
)


# Summarize the data
summary_data <- summarize_data(x, categorical_vars, continuous_vars)

print(summary_data %>% mutate(Value=round(Value)), n =100)

x %>% summarize(mean(Operating_Margin_Percent, na.rm = T))
calculate_means(x, "Turnover_Rate_Percent")

summarize_data <- function(data, categorical_vars, continuous_vars, group_var = NULL) {
  # Calculate percentages for categorical variables
  cat_summary <- calculate_percentages(data, categorical_vars, group_var)
  
  # Calculate means for continuous variables
  cont_summary <- calculate_means(data, continuous_vars)
  
  # Combine the summaries
  summary <- bind_rows(cat_summary, cont_summary)
  
  return(summary)
}



x %>% count(Turnover_Rate_Percent)

calculate_percentages(x, vars = c("LoneInk_grupp", "Income_Sources_Category"))
  # Combine categorical and numerical summaries
  bind_rows(categorical_summaries, numerical_summaries) %>%
    select(Variable, Category, n, Value)
}

# Apply the function to your dataset
summary_data <- summarize_data(x)


```

###old code

```{r}
map(file_paths, ~{
  file_path <- .x
    year <- str_extract(basename(file_path), "\\d{4}") # Extract the year from the file name

  data <- read_sas(file_path) %>%
    left_join(grunduppgifter) %>% 
    mutate(Year = year, # Add the Year variable
           Age = Year - FodelseAr) %>% 
    
    filter(Age > 17,
           SyssStatG %in% c(1, 5) | SyssStat %in% c(1, 5) | SyssStatJ %in% c(1, 5) |
             SyssStat11 %in% c(1, 5) | SyssStat19 %in% c(1, 5)) %>% 

    mutate(
           AgeGroup = case_when(
    Age >= 18 & Age <= 35 ~ "18-35",
    Age > 35 & Age <= 50 ~ "36-50",
    Age > 50 & Age <= 65 ~ "51-65",
    TRUE ~ ">65"
  ),
           Sex = Kon,
           BirthPlace = case_when(
    FodelseLandEU28 == "Sverige" ~ "Sweden",
    FodelseLandEU28 %in% c("EU utom Norden", "Europa utom EU och Norden", "Norden utom Sverige") ~ "Europe",
    FodelseLandEU28 %in% 'Ok√§nt'  ~ NA_character_,
    TRUE ~ "Outside Europe"
  ),
  MarriedOrPartner = case_when(
    Civil %in% c("G", "RP") ~ "Partner",  # Married or Registrerad Partner
    Civil %in% c("OG", "S", "√Ñ", "SP", "EP") ~ "Single",  # Other categories (you can specify these)
    TRUE ~ NA_character_  # Assign NA to cases that do not match any condition
  ),
  EducationLevel = if ("Sun2000niva_old" %in% names(.)) {
      case_when(
        Sun2000niva_old %in% c("1", "2") ~ "Primary",
        Sun2000niva_old %in% c("3", "4") ~ "Secondary",
        Sun2000niva_old == "5" ~ "Tertiary <2 years",
        Sun2000niva_old %in% c("6", "7") ~ "Higher Education",
        TRUE ~ NA_character_
      )
    } else if ("Sun2020niva_old" %in% names(.)) {
      case_when(
        Sun2020niva_old %in% c("1", "2") ~ "Primary",
        Sun2020niva_old %in% c("3", "4") ~ "Secondary",
        Sun2020niva_old == "5" ~ "Tertiary <2 years",
        Sun2020niva_old %in% c("6", "7") ~ "Higher Education",
        TRUE ~ NA_character_
      )
    } else NA_character_,
  Ssyk_majorlevel = as.numeric(str_extract(.[[grep("^Ssyk3", names(.))[[1]]]], "^\\d")
  ) %>% 
    # sammanr√§knad f√∂rv√§rvsinkomst
       mutate(IncomeLevel = case_when(
    CSFVI >= 2 * median(CSFVI) ~ "‚â•200%",
    CSFVI >= 1.2 * median(CSFVI) & CSFVI < 2 * median(CSFVI) ~ "120‚Äì199%",
    CSFVI >= 0.8 * median(CSFVI) & CSFVI < 1.2 * median(CSFVI) ~ "80‚Äì119%",
    CSFVI >= 0.6 * median(CSFVI) & CSFVI < 0.8 * median(CSFVI) ~ "60‚Äì79%",
    CSFVI < 0.6 * median(CSFVI) ~"<60%",
    TRUE ~ NA_character_
  ),
  # kontant bruttol√∂n, f√∂r samtliga anst√§llningar
         mutate(LoneInk_grupp = case_when(
    LoneInk >= 2 * median(LoneInk) ~ "‚â•200%",
    LoneInk >= 1.2 * median(LoneInk) & LoneInk < 2 * median(LoneInk) ~ "120‚Äì199%",
    LoneInk >= 0.8 * median(LoneInk) & LoneInk < 1.2 * median(LoneInk) ~ "80‚Äì119%",
    LoneInk >= 0.6 * median(LoneInk) & LoneInk < 0.8 * median(LoneInk) ~ "60‚Äì79%",
    LoneInk < 0.6 * median(LoneInk) ~"<60%",
    TRUE ~ NA_character_),
    # L√∂ne eller f√∂retagarinkomst f√∂r huvudsaklig syssels√§ttning
           mutate(    
             Lon_Foretag = if ("LonFInk" %in% names(.)) {
      median_LoneFInk <- median(LonFInk, na.rm = TRUE)
      case_when(
        LonFInk >= 2 * median_LoneFInk ~ "‚â•200%",
        LonFInk >= 1.2 * median_LoneFInk & LonFInk < 2 * median_LoneFInk ~ "120‚Äì199%",
        LonFInk >= 0.8 * median_LoneFInk & LonFInk < 1.2 * median_LoneFInk ~ "80‚Äì119%",
        LonFInk >= 0.6 * median_LoneFInk & LonFInk < 0.8 * median_LoneFInk ~ "60‚Äì79%",
        LonFInk < 0.6 * median_LoneFInk ~ "<60%",
        TRUE ~ NA_character_
      )
    } else if ("ArsLonFInk" %in% names(.)) {
      median_ArsLonFInk <- median(ArsLonFInk, na.rm = TRUE)
      case_when(
        ArsLonFInk >= 2 * median_ArsLonFInk ~ "‚â•200%",
        ArsLonFInk >= 1.2 * median_ArsLonFInk & ArsLonFInk < 2 * median_ArsLonFInk ~ "120‚Äì199%",
        ArsLonFInk >= 0.8 * median_ArsLonFInk & ArsLonFInk < 1.2 * median_ArsLonFInk ~ "80‚Äì119%",
        ArsLonFInk >= 0.6 * median_ArsLonFInk & ArsLonFInk < 0.8 * median_ArsLonFInk ~ "60‚Äì79%",
        ArsLonFInk < 0.6 * median_ArsLonFInk ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_,
    
    net_sales_category = if ("Ftg_Nettoomsattning" %in% names(.)) {
      median_Ftg_Nettoomsattning <- median(Ftg_Nettoomsattning, na.rm = TRUE)
      case_when(
        Ftg_Nettoomsattning >= 2 * median_Ftg_Nettoomsattning ~ "‚â•200%",
        Ftg_Nettoomsattning >= 1.2 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 2 * median_Ftg_Nettoomsattning ~ "120‚Äì199%",
        Ftg_Nettoomsattning >= 0.8 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 1.2 * median_Ftg_Nettoomsattning ~ "80‚Äì119%",
        Ftg_Nettoomsattning >= 0.6 * median_Ftg_Nettoomsattning & Ftg_Nettoomsattning < 0.8 * median_Ftg_Nettoomsattning ~ "60‚Äì79%",
        Ftg_Nettoomsattning < 0.6 * median_Ftg_Nettoomsattning ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_,
    
        operating_profit_category = if ("Ftg_Rorelseresultat" %in% names(.)) {
      # Directly using median in case_when conditions
      case_when(
        Ftg_Rorelseresultat >= 2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "‚â•200%",
        Ftg_Rorelseresultat >= 1.2 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "120‚Äì199%",
        Ftg_Rorelseresultat >= 0.8 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 1.2 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "80‚Äì119%",
        Ftg_Rorelseresultat >= 0.6 * median(Ftg_Rorelseresultat, na.rm = TRUE) & Ftg_Rorelseresultat < 0.8 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "60‚Äì79%",
        Ftg_Rorelseresultat < 0.6 * median(Ftg_Rorelseresultat, na.rm = TRUE) ~ "<60%",
        TRUE ~ NA_character_
      )
    } else NA_character_,
    Number_of_employees_Category = case_when(
    Ast_AntalSys >= 1 & Ast_AntalSys <= 9 ~ "Micro-Enterprises: 1-9 employees",
    Ast_AntalSys >= 10 & Ast_AntalSys <= 49 ~ "Small Enterprises: 10-49 employees",
    Ast_AntalSys >= 50 & Ast_AntalSys <= 249 ~ "Medium-Sized Enterprises: 50-249 employees",
    Ast_AntalSys >= 250 ~ "Large Enterprises: 250+ employees",
    TRUE ~ NA_character_
           ),
    Income_Sources_Category = case_when(
    AntAns == 0 ~ "No Income Sources",
    AntAns == 1 ~ "Single Income Source",
    AntAns >= 2 & AntAns <= 3 ~ "Multiple Income Sources: 2-3",
    AntAns >= 4 & AntAns <= 5 ~ "Diverse Income Sources: 4-5",
    AntAns >= 6 ~ "Highly Diverse Income Sources: 6+",
    TRUE ~ NA_character_ # For handling NA values
  ),
  Turnover_Rate_Category = case_when(
    PersOms_Harledd == 0 ~ "No Turnover",
    PersOms_Harledd > 0 & PersOms_Harledd <= 1 ~ "Very Low Turnover (0.1-1.0)",
    PersOms_Harledd > 1 & PersOms_Harledd <= 2 ~ "Low Turnover (1.1-2.0)",
    PersOms_Harledd > 2 & PersOms_Harledd <= 5 ~ "Moderate Turnover (2.1-5.0)",
    PersOms_Harledd > 5 & PersOms_Harledd <= 10 ~ "High Turnover (5.1-10.0)",
    PersOms_Harledd > 10 & PersOms_Harledd <= 20 ~ "Very High Turnover (10.1-20.0)",
    PersOms_Harledd > 20 ~ "Extremely High Turnover (20.1+)",
    TRUE ~ "Unknown" # For handling NA or unexpected values
  ),
  Turnover_Rate_Percent = (PersOms_Harledd / Ast_AntalSys) * 100,
  Operating_Margin_Percent = (Ftg_Rorelseresultat / Ftg_Nettoomsattning) * 100
           )
  
  # Filter data for the interested LopNr and save
  filtered_data <- filter(data, LopNr %in% interested_LopNr)
  csv_path_filtered <-  file.path(output_folder_with, paste("with_HPI_data_categories", year, ".csv", sep="")) 
  write_csv(filtered_data, csv_path_filtered)
  
  # Filter out the interested LopNr and save
  excluded_data <- filter(data, !LopNr %in% interested_LopNr)
  csv_path_excluded <- csv_path_excluded <- file.path(output_folder_without, paste("without_HPI_data_categories", year, ".csv", sep="")) 
  write_csv(excluded_data, csv_path_excluded)
})
# Note: To combine filtered data from all files into one dataframe, 
# you would read from the _filtered.csv files similarly to previous examples
filtered_csv_paths <- list.files(here::here(), pattern = "_filtered\\.csv$", full.names = TRUE)
combined_filtered_data <- map_dfr(filtered_csv_paths, read_csv, .id = "source")

# Now, `combined_filtered_data` contains all the filtered data combined

```

