---
title: "% with 3 or less years years of employment"
format: html
editor: source
---




# Function 7
If having a same employer for more or less than 3 years

Read in 5 dataset without hpi data
bind or merge the five datasets, 
(SyssStat 1 or 5)
join with scb_grunduppgifter where (year of HPA)
extract each year of LopNr_Arbstld
into hpi vs without data
```{r}




library(tidyverse)
library(haven)
library(here)



add_conditional_syssstat_filters <- function(data) {
  # Define the SyssStat* variables you're interested in
  columns_to_check <- c("SyssStatG", "SyssStat", "SyssStatJ", "SyssStat11", "SyssStat19")
  
  # Initialize a filter expression that is always true
  filter_expr <- expr(TRUE)
  
  # Dynamically update the filter expression based on column existence
  for (col in columns_to_check) {
    if (col %in% names(data)) {
      # Dynamically append the condition to the filter expression
      filter_expr <- expr(!!filter_expr & (!!sym(col) %in% c(1, 5)))
    }
  }
    # Apply the dynamic filter expression to the dataframe
  data %>% filter(!!filter_expr)
 }
# Define the base path to the datasets
base_path <- here("..", "..", "..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "Leverans1990_2022")

# Initialize an empty list to store data frames
data_list <- list()

years <- 1991:2021

for (year in years) {
  file_name <- sprintf("eeb_lev_%d.sas7bdat", year)
  full_path <- file.path(base_path, file_name)
  
  # Load the dataset and add the year column
  temp_data <- read_sas(full_path) %>%
    add_conditional_syssstat_filters() %>% 
    select(LopNr, LopNr_ArbstId) %>% 
    mutate(year = year)
  
  # Append the processed data to the list
  data_list[[as.character(year)]] <- temp_data
    rm(temp_data) # Explicitly remove the temporary data frame
  gc() # Manually invoke garbage collection
  
  # The temp_data variable will be overwritten in the next iteration, which helps with memory management
}

# Combine all data frames into a single data frame
all_data <- bind_rows(data_list)




hpa <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "HPI", "HPI clean", "EEB_hpb_clean_2023-10-16.csv")) %>% select(LopNr, Year) %>% mutate(selected = 1)
# Group by person_id and LopNr_ArbstId, then summarise to find work duration


work_duration_with <- 
  all_data %>% 
  left_join(hpa  %>% distinct(LopNr, .keep_all = TRUE), 
            by = c("LopNr" = "LopNr"),
            relationship = "many-to-one") %>% 
  filter(selected==1)

work_duration_without <-  all_data %>% left_join(hpa %>% distinct(LopNr, .keep_all = TRUE), by = c("LopNr" = "LopNr")) %>% 
  filter(is.na(selected))


hpab <-
read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "HPI", "HPI clean", "EEB_hpb_clean_2023-10-16.csv")) %>% 
   filter(rowSums(!is.na(select(., EkB_rel_VO2, Astrand_rel_VO2, HeightCM, WeightKG, BloodPressureSystolic, BloodPressureDiastolic))) >= 2,
         rowSums(!is.na(select(., ExerciseAnswer, TobaccoSmoking, Diet, Health, StressOverall, SymptomBackNeck))) >= 2) %>% 
     arrange(LopNr, Performed) %>% 
  mutate(hpa_number = row_number(), 
         test_count = n(), .by = LopNr) %>% 
    # take the first hpi tests
  filter(hpa_number == 1) %>% 
   select(LopNr, Year) %>% 
   mutate(selected = 1)

  # mutate(work_duration_category = case_when(
  #   duration >= 10 ~ "More than 10 years",
  #   duration >= 5 ~ "5 years",
  #   duration >= 3 ~ "3 years",
  #   duration  < 3 ~ "Less than 3 years",
  #   TRUE ~ NA_character_
  # ))


duration_seq_with <-
work_duration_with %>%
  filter(!is.na(LopNr_ArbstId)) %>%
  arrange(LopNr, year) %>%
  group_by(LopNr) %>%
  mutate(
    # Identify when LopNr_ArbstId changes
    change = LopNr_ArbstId != lag(LopNr_ArbstId),
    # Create a group for consecutive sequences
    grp = cumsum(change | is.na(change)) # Account for the first row in each group
  ) %>%
  # Within each LopNr and sequence group, number the rows starting from 0
  group_by(LopNr, grp) %>%
  mutate(consecutive_years = row_number() - 1) %>%
  ungroup() %>% 
  mutate(consecutive_years_category = case_when(
    consecutive_years >= 3 ~ ">=3 years",
    consecutive_years  < 3 ~ "<3 years",
    TRUE ~ NA_character_
  ),
   year_group = case_when(
      year >= 1995 & year <= 1999 ~ "1995-1999",
      year >= 2000 & year <= 2004 ~ "2000-2004",
      year >= 2005 & year <= 2009 ~ "2005-2009",
      year >= 2010 & year <= 2014 ~ "2010-2014",
      year >= 2015 & year <= 2019 ~ "2015-2019",
      year >= 2020 & year <= 2021 ~ "2020-2021",
      TRUE ~ "Other")
  ) %>% 
  select(!c(Year, selected)) %>% 
  left_join(hpab, by = c("LopNr" = "LopNr", "year" = "Year")) %>% 
  filter(selected==1) %>% 
    group_by(LopNr, year_group) %>%
  # Randomly select one entry per LopNr within each year group
  sample_n(size = 1) %>%
  ungroup()



set.seed(123) 
duration_seq_without <-
work_duration_without %>%
  filter(!is.na(LopNr_ArbstId)) %>%
  arrange(LopNr, year) %>%
  group_by(LopNr) %>%
  mutate(
    # Identify when LopNr_ArbstId changes
    change = LopNr_ArbstId != lag(LopNr_ArbstId),
    # Create a group for consecutive sequences
    grp = cumsum(change | is.na(change)) # Account for the first row in each group
  ) %>%
  # Within each LopNr and sequence group, number the rows starting from 0
  group_by(LopNr, grp) %>%
  mutate(consecutive_years = row_number() - 1) %>%
  ungroup() %>% 
  mutate(consecutive_years_category = case_when(
    consecutive_years >= 3 ~ ">=3 years",
    consecutive_years  < 3 ~ "<3 years",
    TRUE ~ NA_character_
  ),
   year_group = case_when(
      year >= 1995 & year <= 1999 ~ "1995-1999",
      year >= 2000 & year <= 2004 ~ "2000-2004",
      year >= 2005 & year <= 2009 ~ "2005-2009",
      year >= 2010 & year <= 2014 ~ "2010-2014",
      year >= 2015 & year <= 2019 ~ "2015-2019",
      year >= 2020 & year <= 2021 ~ "2020-2021",
      TRUE ~ "Other")
  )%>% 
    group_by(LopNr, year_group) %>%
  # Randomly select one entry per LopNr within each year group
  sample_n(size = 1) %>%
  ungroup()


write_csv(duration_seq_with, here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "with_hpi_lopnr", "5.work_duration", "workduration_with.csv"))

write_csv(duration_seq_without, here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "with_hpi_lopnr", "5.work_duration", "workduration_without.csv"))

duration_seq_with_sum<-
duration_seq_with %>% 
  group_by(year_group, consecutive_years_category) %>% 
   summarise(n = n(), .groups = "drop") %>%
  # Calculate the total count for each year_group
  group_by(year_group) %>%
  mutate(total = sum(n)) %>%
  # Calculate percentage
  mutate(percentage = (n / total) * 100) %>%
  ungroup() %>% 
        mutate(YearGroup = year_group,
             data = "with_HPI") %>% 
  filter(year_group!="Other")


duration_seq_without_sum<-
duration_seq_without %>% 
  group_by(year_group, consecutive_years_category) %>% 
   summarise(n = n(), .groups = "drop") %>%
  # Calculate the total count for each year_group
  group_by(year_group) %>%
  mutate(total = sum(n)) %>%
  # Calculate percentage
  mutate(percentage = (n / total) * 100) %>%
  ungroup() %>% 
        mutate(YearGroup = year_group,
             data = "without_HPI") %>% 
  filter(year_group!="Other")


write_csv(duration_seq_with_sum, here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "with_hpi_lopnr", "5.work_duration", "workduration_with_summarized.csv"))

write_csv(duration_seq_without_sum, here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "with_hpi_lopnr", "5.work_duration", "workduration_without_summarized.csv"))

```
