---
title: "WT:WP1:Paper 1, flowchart, table 2 and 3"
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    code-link: true
    embed-resources: true
    page-layout: full
    grid:
      sidebar-width: 200px
      margin-width: 200px
      body-width: 1100px
author: Daniel Väisänen
editor:
  markdown: 
    wrap: sentence
toc: true
toc-depth: 3
toc-location: left
toc-expand: false
execute: 
  warning: false
  echo: true
  freeze: auto
highlight-style: custom.theme
theme:
  light: github
  dark: darkly
---

# Project description

Paper 1 in work project 1 of the work together series.

The aim of this study was to investigate the reach, defined as the proportion of the target population that participated in the program, of a nation-wide OHSP that has included Swedish workers for almost 30 years, both in terms of individual and organizational characteristics, and how the reach has changed over the years. A second aim was to identify under- and overrepresented groups.





## Libraries

```{r}
xfun::pkg_attach(
  "tidyverse", 
  "dtrackr", 
  "glue", 
  "DT", 
  "flextable",
  "here"
  )

```


#-------------------------

## Data

```{r}
hpa <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "HPI", "HPI clean", "EEB_hpb_clean_2023-10-16.csv")) %>% 
    mutate(SymptomBackNeck = if_else(SymptomBackNeck == 7 | SymptomBackNeck == 8, NA, SymptomBackNeck)) 

scb <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "SCB clean", "Grunduppgifter_2023-09-24.csv")) %>% mutate(Kommun=str_replace(Kommun, "^0+", ""))# remove leading zeros

fk <- read_csv(here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "FK", "FK clean", "fk_sickness_absence_cleaned_2023-10-27.csv"))

# variables from population (scb) data on individual level, for table 2 and 3
scb_vars <- read_csv(here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "with_hpi_lopnr", "6.organization_variables", "organization_data.csv"))

# consecutive years of work
scb_consecutive <- read_csv( here::here("..", "..","..", "HPI (DNR XXXXXX)", "Data HPI registeruttag 2023", "SCB", "Leverans", "Leverans_20240306", "with_hpi_lopnr", "5.work_duration", "workduration_with.csv"))


# sickness absence within one year of HPA
fk_sickness_absence <- 
hpa %>% inner_join(fk %>% select(LopNr, FALL_TOM_DATUM), relationship = "many-to-many") %>% 
  mutate(    # Calculate the difference in days
    Days_Diff_fk = as.numeric(Performed - FALL_TOM_DATUM),
    # Mark 1 if the difference is exactly 365.25 days; otherwise, 0
    Sickness_absence_within_1_year_of_HPA = if_else(Days_Diff_fk > 0 & Days_Diff_fk < 365.25, "Yes", "No")) %>% 
  filter(Sickness_absence_within_1_year_of_HPA=="Yes") %>% 
  distinct(LopNr, Performed, .keep_all = TRUE) %>% 
  select(LopNr, Performed, Sickness_absence_within_1_year_of_HPA)


# join SCB, HPI and income data 
df <- hpa %>% left_join(scb, by = join_by(LopNr, Performed, Year))  %>% 
  left_join(scb_vars, by = join_by(LopNr, Performed, Year)) %>% 
  left_join(scb_consecutive, by = join_by(LopNr, Year == year)) %>% 
  left_join(fk_sickness_absence) %>% 
  mutate(Sickness_absence_within_1_year_of_HPA = if_else(is.na(Sickness_absence_within_1_year_of_HPA), "No", Sickness_absence_within_1_year_of_HPA))


```


# Variable creation
```{r}
# data from tillväxtverket
metropolitan_municipalities <- c("114", "123", "126", "127", "128", "136", "138", "139", "160", 
                                 "162", "163", "180", "181", "182", "183", "184", "186", "191", 
                                 "1230", "1231", "1262", "1280", "1281", "1402", "1480", "1481")

dense_municipalities <- c("115", "117", "120", "140", "187", "305", "330", "380", "381", "461", 
                          "480", "481", "483", "484", "486", "561", "562", "580", "581", "583", 
                          "584", "642", "643", "680", "682", "683", "686", "687", "760", "765", 
                          "780", "781", "880", "881", "882", "883", "884", "1060", "1080", "1082", 
                          "1233", "1261", "1263", "1272", "1275", "1282", "1277", "1282", "1283", 
                          "1285", "1286", "1287", "1290", "1292", "1380", 
                          "1382", "1401", "1407", "1440", "1441", "1472", "1482", "1484", "1485", 
                          "1486", "1487", "1488", "1489", "1490", "1492", "1493", "1494", "1495", 
                          "1496", "1497", "1498", "1499", "1715", "1761", "1780", "1781", "1782", 
                          "1784", "1785", "1862", "1880", "1881", "1883", "1884", "1907", "1960", 
                          "1961", "1980", "1981", "1982", "1983", "1984", "2062", "2080", "2081", 
                          "2085", "2104", "2180", "2181", "2262", "2280", "2281", "2380", "2523", 
                          "2580", "2581", "2582", "2583", "2584")

rural_municipalities <- c("125", "128", "188", "192", "319", "331", "360", "382", "428", "482", "488", "509", 
                          "512", "513", "560", "563", "580", "582", "586", "604", "617", "662", "665", 
                          "684", "685", "761", "763", "764", "767", "821", "834", "840", "860", "861", "862", "885", 
                          "980", "1081", "1083", "1214", "1256", "1257", "1260", "1264", "1265", 
                          "1266", "1267", "1270", "1273", "1276", "1278", "1284", "1291", "1293", "1315", 
                          "1381", "1383", "1384", "1415", "1419", "1421", "1427", "1430", "1435", 
                          "1438", "1439", "1442", "1443", "1444", "1445", "1446", "1447", "1452", 
                          "1460", "1461", "1462", "1463", "1465", "1466", "1491", "1470", "1471", "1473", 
                          "1730", "1737", "1760", "1762", "1763", "1764", "1765", "1766", "1783", "1814", 
                          "1860", "1861", "1863", "1864", "1882", "1885", "1904", "1962", "2021", 
                          "2023", "2026", "2029", "2031", 
                          "2034", "2039", "2061", "2082", "2083", "2084", "2101", "2121", "2132", 
                          "2161", "2182", "2183", "2184", "2260", "2282", "2283", "2284", "2303", 
                          "2305", "2309", "2313", "2321", "2326", "2361", "2401", "2403", "2404", 
                          "2409", "2417", "2418", "2421", "2422", "2425", "2460", "2462", "2463", 
                          "2480", "2481", "2482", "2505", "2506", "2510", "2513", "2514", "2518", 
                          "2521", "2560")



df1 <- df %>% 
   mutate(Kommun=str_replace(Kommun, "^0+", "")) %>% 
  # Convert Year to date and create 5-year periods
  mutate(Period = case_when(
    Year >= 1995 & Year < 2000 ~ "1995-1999",
    Year >= 2000 & Year < 2005 ~ "2000-2004",
    Year >= 2005 & Year < 2010 ~ "2005-2009",
    Year >= 2010 & Year < 2015 ~ "2010-2014",
    Year >= 2015 & Year < 2020 ~ "2015-2019",
    Year >= 2020 & Year <= 2023 ~ "2020-2021",
    TRUE ~ NA_character_  # For years outside the specified range
  )) %>%
  # Create age groups
  mutate(AgeGroup = case_when(
    Age >= 18 & Age <= 35 ~ "18-35",
    Age > 35 & Age <= 50 ~ "36-50",
    Age > 50 & Age <= 65 ~ "51-65",
    TRUE ~ ">65"
  )) %>%
  # Categorize Civil status
    mutate(Civil_status_hpi = case_when(
    Civil %in% c("G", "RP") ~ "Partner",  # Married or Registrerad Partner
    Civil %in% c("OG", "S", "Ä", "SP", "EP") ~ "Single",  # Other categories 
    TRUE ~ NA_character_  
  )) %>% 
  # Categorize Birth country
  mutate(BirthPlace_hpi = case_when(
    FodelseLandEU28 == "Sverige" ~ "Sweden",
    FodelseLandEU28 %in% c("EU utom Norden", "Europa utom EU och Norden", "Norden utom Sverige") ~ "Europe",
    FodelseLandEU28 %in% 'Okänt'  ~ NA_character_,
    TRUE ~ "Outside Europe"
  )) %>%
  # Categorize Kommun based on hypothetical population size categories
  mutate(KommunSize_hpi = case_when(
    Kommun %in% metropolitan_municipalities ~ "Metropolitan municipalities",
    Kommun %in% dense_municipalities ~ "Dense municipalities",
    Kommun %in% rural_municipalities ~ "Rural municipalities",
    TRUE ~ NA_character_
  )) %>%

  # Categorize education level
  mutate(EducationLevel_hpi = case_when(
    SUN2000Niva_Old %in% 1:2 ~ "Primary",
    SUN2000Niva_Old %in% 3:4 ~ "Secondary",
    SUN2000Niva_Old %in% 5 ~ "Tertiary <2 years",
    SUN2000Niva_Old %in% 6:7 ~ "Higher Education",
    TRUE ~ NA_character_
  )) %>% 
 
    mutate(

       SSYK2_2012 = str_extract(Ssyk3_2012_J16, "\\b\\d{3}\\b") %>% substr(1, 2),
       SSYK3_96 = coalesce(Ssyk3_J16, Ssyk3),
   
BMI_cat = case_when(BMI <25 ~ "<25",
                    BMI >= 25 & BMI < 30 ~ "≥25 & <30",
                    BMI >= 30 ~ "≥30",
                    
TRUE ~ NA_character_),
astr_cat = if_else(Astrand_rel_VO2 > 32, "≥32", "<32"),
ExerciseDi = case_when(
    ExerciseAnswer %in% 1:2 ~ "Never or irregularly",   
    ExerciseAnswer %in% 3 ~ "1-2 times/week",
    ExerciseAnswer %in% 4:5 ~ ">2 times/week",
    ),
TobaccoSmokingDi = case_when(
    TobaccoSmoking %in% 1:3 ~ "Daily",    
    TobaccoSmoking %in% 4 ~ "occationally", 
    TobaccoSmoking %in% 5 ~ "Never" 
    ),
HealthDi = case_when(
    Health %in% 1:2 ~ "Poor",             
    Health %in% 3 ~ "Neutral",   
    Health %in% 4 ~ "Good" 
    ),
PhysicalWorkSituation = case_when(
      PhysicalWorkSituation == "Periodvis fysiskt krävande arbete" ~ "Occasionally physically demanding work",
      PhysicalWorkSituation == "Periodvis mycket fysiskt krävande arbete" ~ "Occasionally highly physically demanding work",
      PhysicalWorkSituation == "Rörligt arbete" ~ "Physically active work",
      PhysicalWorkSituation == "Stillasittande med inslag av rörligt arbete" ~ "Sedentary work",
      TRUE ~ PhysicalWorkSituation 
    ),
PhysicalWorkSituationDi = case_when(
    PhysicalWorkSituation %in% c("Occasionally physically demanding work", "Occasionally highly physically demanding work") ~ "Physically demanding work",             
    PhysicalWorkSituation %in% "Physically active work" ~ "Physically active work",   
    PhysicalWorkSituation %in% "Sedentary work" ~ "Sedentary work" 
    ),
 ) %>% 
  # factors
   mutate(
    EducationLevel =
      factor(EducationLevel,
             levels = c("Tertiary", "Secondary", "Primary")),
    KommunSize =
      factor(KommunSize,
             levels = c("Metropolitan municipalities", "Dense municipalities", "Rural municipalities")),
    Civil_status =
      factor(Civil_status,
             levels = c("Partner", "Single")),
    Place_of_origin = 
      factor(Place_of_origin, 
             levels = c("Sweden", "Europe", "Outside Europe")),
    IncomeLevel =
      factor(IncomeLevel,
             levels = c("≥200%", "120 to <200%", "80 to <120%", "60 to <80%", "<60%")),

  SSYK = factor(SSYK, levels = c(
    "Military",
    "Managers",
    "Science and engineering",
    "Health care",
    "Education",
    "Other professionals",
    "Associate professionals",
    "Administration and customer service",
    "Personal care",
    "Service and shop sales",
    "Agriculture and forestry",
    "Building",
    "Manufacturing",
    "Transport",
    "Mechanical manufacturing",
    "Cleaners",
    "Other elementary occupations"
  )),
  # worklife 
  Ownership_sector = factor(Ownership_sector, levels = c(
    "Private",
    "Public Regional",
    "Public Govermental"
    )), 
Number_of_employees_Category = factor(Number_of_employees_Category, levels = c(
  "1 to 9", 
  "10 to 49", 
  "50 to 249", 
  "≥250"
)), 
Operatingprofit_category = factor(Operatingprofit_category, levels = c(
  ">500%",
  "0% to 500%",
  "-500% to 0%",
  "<-500%"
)),
Operating_Profit_Margin_Category = factor(Operating_Profit_Margin_Category, levels = c(
  ">5%",
  "0% to 5%",
  "-5% to 0%",
  "<-5%"
)),
Turnover_Rate_Category = factor(Turnover_Rate_Category, levels = c(
  "<10%",
  "10% to <20%",
  "≥20%"
)),
consecutive_years_category = factor(consecutive_years_category, levels = c(
  ">=3 years",
  "<3 years"
)),
  SNI_group = factor(SNI_group, levels = c(
    "Agriculture, forestry and fishing",
    "Mining and quarrying",
    "Manufacturing",
    "Electricity, gas, steam and air conditioning supply",
    "Water supply; sewerage, waste management and remediation activities",
    "Construction",
    "Wholesale and retail trade; repair of motor vehicles and motorcycles",
    "Transportation and storage",
    "Accommodation and food service activities",
    "Information and communication",
    "Financial and insurance activities",
    "Real estate activities",
    "Professional, scientific and technical activities",
    "Administrative and support service activities",
    "Public administration and defence; compulsory social security",
    "Education",
    "Human health and social work activities",
    "Arts, entertainment and recreation",
    "Other service activities",
    "Activities of households as employers; undifferentiated goods- and services-producing activities of households for own use",
    "Activities of extraterritorial organisations and bodies"
  )),
          TobaccoSmokingDi = 
      factor(TobaccoSmokingDi, 
             levels = c("Never", "occationally", "Daily")),
        ExerciseDi = 
      factor(ExerciseDi, 
             levels = c("Never or irregularly", "1-2 times/week", ">2 times/week")),
            HealthDi = 
      factor(HealthDi, 
             levels = c("Good", "Neutral", "Poor")),
              PhysicalWorkSituationDi = 
      factor(PhysicalWorkSituationDi, 
             levels = c("Sedentary work", "Physically active work", "Physically demanding work"))
  )
  

```

# Data driven flowchart of data in/ex-clusion

```{r}

# global options for dtrackr
old = options(
  dtrackr.strata_glue="{tolower(.value)}",
  dtrackr.strata_sep=", ",
  dtrackr.default_message = "n={formatC(.count, big.mark = ',',format = 'fg')}"
)



df2 <-
df1 |> 
        arrange(LopNr, Performed) %>% 
  mutate(hpa_number = row_number(), 
         test_count = n(), .by = LopNr) %>% 
  filter(hpa_number == 1,
         Year <= 2021) %>% 
    track() %>%
  filter(rowSums(!is.na(select(., EkB_rel_VO2, Astrand_rel_VO2, HeightCM, WeightKG, BloodPressureSystolic, BloodPressureDiastolic))) >= 2,
         rowSums(!is.na(select(., ExerciseAnswer, TobaccoSmoking, Diet, Health, StressOverall, SymptomBackNeck))) >= 2, 
         .messages = "<2 questionnarie and\n<2 physiological variables\nn={formatC(.excluded, big.mark = ',',format = 'fg')}", .headline = "" ) %>% 
   status(.messages = "n={formatC(.count, big.mark = ',')}") %>% 
  exclude_all(
    Year < 1995 ~ "-HPAs before 1995, n={formatC(.excluded, big.mark = ',',format = 'fg')}",
       Age < 18 ~ "-Under 18 years of age, n={formatC(.excluded, big.mark = ',',format = 'fg')}",
    LoneInk == 0 | is.na(LoneInk) ~ "-No verified income, n={formatC(.excluded, big.mark = ',',format = 'fg')}",
    Income_Sources_Category=="No Income Sources" | is.na(Income_Sources_Category) ~ "-No verified income source, n={formatC(.excluded, big.mark = ',',format = 'fg')}",
    .headline = ""
  ) %>% 
  ungroup(.headline = "Total study population\nn={formatC(.count, big.mark = ','  )  }                    ",
          .messages = "") 



df2 %>% flowchart(
    filename = here::here("figures", "Flowchart_WP1_Paper1"),
  formats = c("png", "pdf", "svg")
)

```

# Characteristics of excluded individuals

```{r}

df3<-
df1 |> 
        arrange(LopNr, Performed) %>% 
  mutate(hpa_number = row_number(), 
         test_count = n(), .by = LopNr) %>% 
  filter(hpa_number == 1,
         Year <= 2021) %>% 
    track() %>%
  filter(rowSums(!is.na(select(., EkB_rel_VO2, Astrand_rel_VO2, HeightCM, WeightKG, BloodPressureSystolic, BloodPressureDiastolic))) >= 2,
         rowSums(!is.na(select(., ExerciseAnswer, TobaccoSmoking, Diet, Health, StressOverall, SymptomBackNeck))) >= 2, 
         .messages = "<2 questionnarie and\n<2 physiological variables\nn={formatC(.excluded, big.mark = ',',format = 'fg')}", .headline = "" ) %>% 
   status(.messages = "n={formatC(.count, big.mark = ',')}")



  
df_excluded <- df3 %>% 
  anti_join(df2 %>% select(LopNr, Performed), by = "LopNr") %>% 
  select(EducationLevel, Sex, AgeGroup, Place_of_origin, IncomeLevel) %>% 
  pivot_longer(
    cols = c(EducationLevel, Sex, AgeGroup, Place_of_origin, IncomeLevel),
    names_to = "name",
    values_to = "value"
  ) %>% 
  drop_na() %>% 
  group_by(name, value) %>% 
  summarise(Count_excluded = n(), .groups = 'drop') %>% 
  group_by(name) %>% 
  mutate(Total_excluded = sum(Count_excluded),
         Percentage_excluded = Count_excluded / Total_excluded * 100,
         Formatted_excluded = paste0(format(Count_excluded, big.mark = ","), " (", sprintf("%.1f", Percentage_excluded), "%)")) %>% 

  ungroup()

# Process the second dataset and rename variables with "_included" suffix
df_included <- df2 %>% 
  select(EducationLevel, Sex, AgeGroup, Place_of_origin, IncomeLevel) %>% 
  pivot_longer(
    cols = c(EducationLevel, Sex, AgeGroup, Place_of_origin, IncomeLevel),
    names_to = "name",
    values_to = "value"
  ) %>% 
  group_by(name, value) %>% 
  summarise(Count_included = n(), .groups = 'drop') %>% 
  group_by(name) %>% 
  mutate(Total_included = sum(Count_included),
         Percentage_included = Count_included / Total_included * 100,
          Formatted_included = paste0(format(Count_included, big.mark = ","), " (", sprintf("%.1f", Percentage_included), "%)")) %>% 
  ungroup()

# Join the two datasets on 'name' and 'value'
df_inc_exc <- df_excluded %>%
  left_join(df_included, by = c("name", "value")) %>% select(!c(Percentage_excluded, Percentage_included, Count_excluded, Total_excluded, Count_included, Total_included))

# Print the resulting dataframe
write_csv(df_inc_exc, here::here("data" ,"df_inc_exc.csv"))

```

# -------------------------

# Function for creating table 1

```{r Table functions}

###################
# FACTOR FUNCTION #
###################

factor.fun <- function(df, var, group){
  var <- enquo(var)
  group <- enquo(group)
  
round.fun <- function(x) {
  sapply(x, function(y) {
    if(y >= 10) {
      round(y, digits = 0)
    } else if(y >= 0 & y < 10) {
      sprintf("%.1f", round(y, digits = 1))
    } else {
      formatC(y, format = "e", digits = 1)
    }
  })
}
  
  contingency.table <- df %>%
    select(!!var, !!group) %>%
    table() 
    
  # Pearson’s Chi-squared test:
  test <- chisq.test(contingency.table)
  t <- "2"
  
  # Fisher’s exact test but with Monte Carlo simulation approach, which is an approximate method.
  if(min(test$expected)<5)
    {test <- fisher.test(contingency.table, simulate.p.value = TRUE, B = 20000)
    t <- "4"}
    
  p.val <- test[["p.value"]] 
  if(p.val == ""){p.val <- NA}
    else if(p.val < 0.01){p.val <- "<0.01"}
      else{p.val <- sprintf(p.val, fmt = '%#.2f')}
  
  
  na <- sum(is.na(pull(df, !!var)))
  tab <- tibble("Variables"=as_label(var),"na"=as.numeric(na), "p-value"=p.val) 
  
  # mean, min and max:
  sum_tab <- df %>%
    select(!!var, !!group) %>%
    group_by(!!group, !!var) %>%
    summarize(n = n(), .groups = "drop_last") %>%
    nest() %>%
    ungroup() %>%
    mutate(sum = map(data, ~sum(.$n))) %>%
    unnest(c(data, sum)) %>%
    mutate(percent = round.fun(100*(n/sum))) %>% 
    mutate( val = paste0(format(.$n, big.mark = ",")," (",.$percent,"%)")) %>% 
    select(-sum, -n, -percent) %>%
    pivot_wider(., names_from = (!!group), values_from = val ) %>%
    dplyr::rename(Variables = as_label(var)) %>%
    arrange(Variables) %>%
    mutate_at(vars(Variables), ~replace(as.character(.), is.na(.), "Missing")) %>%
    mutate_at(vars(Variables), ~paste0("  - ", .)) %>%
    mutate_if(is.character, ~replace(., is.na(.), 0))

   t <- bind_rows(tab, sum_tab) %>% mutate("t" = t)
  
  return(t)
}



#######################
# CONTINUOUS FUNCTION #
#######################

continuous.fun <- function(df, var, group, stat_type){
  var <- enquo(var)
  group <- enquo(group)
  name_g <- as_label(group) 
  name_v <- as_label(var) 
  
  # round decimals
round.fun <- function(x) {
  df <- x %>%
    mutate(across(.cols = "percent", 
                  ~ ifelse(.x >= 10, 
                           round(.x, digits = 0),  
                           ifelse(.x >= 0 & .x < 10, 
                                  sprintf("%.1f",round(.x, digits = 1)),
                                  formatC(.x, format = "e", digits = 1))))) %>%
    mutate(across(where(~ is.numeric(.) && !identical(names(.), "percent")), 
                  ~ ifelse(.x >= 1 | .x == 0, 
                           round(.x, digits = 1),
                           ifelse(.x >= 0.01 & .x <= 0.9, 
                                  round(.x, digits = 1),
                                  formatC(.x, format = "e", digits = 1)))))
  return(df)
}

  
  mean_confidence.fun <- function(m, se) {
    m <- m
    se <- se
    ci_lower <- round(m - 1.96 * se, 2)
    ci_upper <- round(m + 1.96 * se, 2)
    #ci_lower <- m - 1.96 * se
    #ci_upper <- m + 1.96 * se
     return(sprintf("%.1f (%.1f-%.1f)", m, ci_lower, ci_upper)) # 1 decimal place rounding
  }
 
  # make factors
  if( is.null(levels(group)) ){df <- mutate( df, !!(name_g) := factor((!!group)) ) }

  # p-value
  exp1 <- expr(!!ensym(var) ~ !!ensym(group))
  if( length(unique(pull(df, !!group))) > 2 ){
    test <- kruskal.test(formula = eval(exp1), data = df) 
    p.val <- test[["p.value"]]
    if(p.val < 0.01){p.val <- "<0.01"}else{p.val <- sprintf(p.val, fmt = '%#.2f')}
    t <- "3"
  }else{
    lvl <- df %>% select(!!var, !!group) %>% na.omit() %>% pull(., (!!group)) %>% unique() %>% length()
    if(lvl == 2){
    test <- wilcox.test(formula = eval(exp1), data = df)
    p.val <- test[["p.value"]]
    if(p.val < 0.01){p.val <- "<0.01"}else{p.val <- sprintf(p.val, fmt = '%#.2f')}
    t <- "1"}
    if(lvl < 2) {
      p.val <- NA
      t <- "5"
    }
  }
  l <- unique(pull(df, !!group))
  
  # mean, min max or similar
  sum_tab <- df %>%
    select(!!var, !!group) %>%
    mutate(na = sum(is.na(!!var))) %>%
    group_by(!!group) %>%
    summarize(median = median((!!var),na.rm = T),
              mean = mean((!!var),na.rm = TRUE),
              se = sd((!!var), na.rm = TRUE) / sqrt(sum(!is.na((!!var)))),
              sd = sd((!!var), na.rm = TRUE),
              min = min((!!var),na.rm = T),
              max = max((!!var),na.rm = T),
              IQR = IQR((!!var), na.rm = TRUE),
              Q1 = quantile((!!var), probs = 0.25, na.rm = TRUE),
              Q3 = quantile((!!var), probs = 0.75, na.rm = TRUE),
              "  - Missing" = sum(is.na(!!var)),
              n = n(),
              .groups = "drop") %>% # d <- d_
    # mean(ci), median(icr) or median(range)
    mutate(percent = 100 * (`  - Missing` / n)) %>%
    mutate("  - Missing" = formatC(.$`  - Missing`, format="d", big.mark = ",")) %>%
    {. ->> temp} %>%
    {if ({{stat_type}} == "mean_ci") {
      mutate(., {{ var }} := pmap_chr(., ~mean_confidence.fun(..3, ..4)))
    } else .} %>%
    {if ({{stat_type}} == "mean_sd") {
      mutate(., {{ var }} := sprintf("%.1f (%.1f)", mean, sd))
    } else .} %>%
    {if ({{stat_type}} == "median_q1q3") {
      mutate(., {{ var }} := paste0(median, " (", Q1, "-", Q3, ")"))
    } else .} %>%
    {if ({{stat_type}} == "median_range") {
      mutate(., {{ var }} := paste0(median, " (", min, "-", max, ")"))
    } else .} %>%
    round.fun() %>%
    mutate("  - Missing" = paste0(.$`  - Missing`," (",.$percent,"%)")) %>%
    mutate_at(vars(`  - Missing`), str_replace_all, pattern = "^0 \\(0%\\)", replacement = "0") %>%
    select(!!group, !!as_label(var), `  - Missing`) %>%
    #dplyr::rename(., !!(var) :="val" ) %>%
    pivot_longer(-!!group, names_to='Variables', values_to='value') %>%
    pivot_wider(names_from = !!group, values_from = value) %>%
    mutate("p-value" = c(p.val, NA)) %>%
    mutate(na = c( sum(is.na(pull(df, !!var))), NA )) %>%
    filter(!if_all(all_of(l), ~grepl("^0$", .) & Variables == "  - Missing")) %>%
    mutate_if(is.character, str_replace_all, pattern = "NA \\(Inf--Inf\\)", replacement = "NA (NA)") %>%
    mutate("t" = t)

  return(sum_tab)
}   

###########################
# COMBINE TABLES FUNCTION #
###########################

sum_table.fun <- function(df, val, group, gr_order, stat_type ) {
  group <- enquo(group)
  
  # round decimals
  round.fun <- function(x){
    df <- x %>%
    mutate_if(
    is.numeric,
    ~ ifelse(.x >= 1|.x==0, round(.x, digits = 0),
            ifelse(.x< 1 & .x >= 0.001, round(.x, digits = 2),
                                          "< 0.001")))
  }
  c <- c()
  f <- c()
  
  for (v in val) {
    if(is.numeric( pull(df, v))) 
      {c<-c(c, v)}
    else{f<-c(f, v)}
  } 
  
  # count (n) in each group
  count <- table( pull(df, !!group) ) 
  count_t <- count %>% 
  format(big.mark = ",") %>%

    # html
  paste0("<b>", names(.), "</b>", "<br>", "(n=", ., ")") %>%
  set_names(., names(count))
  names_n <- names(count) %>% set_names(., count_t)
  
  l_c <- imap(c, ~continuous.fun(stat_type=stat_type, df=df, var=!! rlang::sym(.x), group=(!!group)) ) %>%
    bind_rows(., )
  l_f <- imap(f, ~factor.fun(df, !! rlang::sym(.x), (!!group)) ) %>%
    bind_rows(.)
  
  table <- bind_rows(l_c, l_f) %>%
    round.fun() %>%
    mutate("p-value" = ifelse(is.na(.$`p-value`),NA, paste0("$$ ",.$`p-value`,"^",.$t," $$"))) %>%
    select("Variables", any_of(gr_order), "p-value", "na", -t) %>%
    mutate_at(vars("na"), ~ as.character(.)) %>%
    dplyr::rename(!!! names_n) %>%
    dplyr::rename("**p-value**"=`p-value`, "<b>Missing</b>"='na')

  #return(list(l_c, l_f, table))
  return(table)
  
}
  


  


```


# Function for creating vs-tables

# -------------------------


```{r}

### Function for calculate difference between percentages of categorical variables ####
# # for 
 # group_var <- sym("Period")
 # df1 %>% select({{group_var}})
 #  {.->>temp} %>%

# The relative_risk is calculated as the ratio of the percentage in df2 to the percentage in df1. It quantifies how much more (or less) common a category is in df2 compared to df1.


 calculate_percentages <- function(df, group_var, vars) {
  df %>%
    select({{ group_var }}, all_of(vars)) %>%
    pivot_longer(cols = -{{ group_var }}, names_to = "Variable", values_to = "Categories") %>%
    group_by({{ group_var }}, Variable, Categories) %>%
    summarize(n = n(), .groups = "drop_last") %>%
    group_by({{ group_var }}, Variable) %>%
    mutate(sum = sum(n)) %>%
    ungroup() %>%
    mutate(percent = 100 * (n / sum)) %>%
    select(-sum) 
 }

 
  compare_percentages <- function(df1, df2, group_var, vars) {
    
  df1_percentages <- calculate_percentages(df1, {{ group_var }}, vars)
  df2_percentages <- calculate_percentages(df2, {{ group_var }}, vars)

  inner_join(df1_percentages, df2_percentages,
by = join_by({{ group_var }}, Variable, Categories)) %>%    
    mutate(percent_diff = percent.x - percent.y) %>%  {.->>temp} %>%
    #select(-percent.x, -percent.y) %>%
    rename(Percent_df1 = percent.x, 
           Percent_df2 = percent.y, 
           n_df1 = n.x,
           n_df2 = n.y,
           Variable = Variable, 
           Categories = Categories)
 }
 
  

  calculate_percentages <- function(df, vars, group_var = NULL) {
  # Check if group_var is provided and is a valid column name
  if (!is.null(group_var) && group_var %in% names(df)) {
    # Processing when group_var is provided and valid
    df %>%
      select(.data[[group_var]], all_of(vars)) %>%
      pivot_longer(cols = -all_of(group_var), names_to = "Variable", values_to = "Categories") %>%
      group_by(.data[[group_var]], Variable, Categories) %>%
      summarize(n = n(), .groups = "drop_last") %>%
      group_by(.data[[group_var]], Variable) %>%
      mutate(sum = sum(n)) %>%
      ungroup() %>%
      mutate(percent = 100 * (n / sum)) %>%
      select(-sum)
  } else {
    # Processing when group_var is not provided or not valid
    df %>%
      pivot_longer(cols = all_of(vars), names_to = "Variable", values_to = "Categories") %>%
      count(Variable, Categories) %>%
      group_by(Variable) %>%
      mutate(percent = 100 * n / sum(n)) %>%
      ungroup() 
  }
}

  compare_percentages <- function(df1, df2, group_var, vars) {
    
  df1_percentages <- calculate_percentages(df1, vars, group_var)
  df2_percentages <- calculate_percentages(df2, vars, group_var)

  inner_join(df1_percentages, df2_percentages, by = c("Variable", "Categories", group_var)) %>%    
    mutate(percent_diff = percent.x - percent.y,
           relative_risk = percent.y / percent.x) %>%
    # select(-percent.x, -percent.y) %>%
    rename(Percent_df1 = percent.x, 
           Percent_df2 = percent.y, 
           n_df1 = n.x,
           n_df2 = n.y,
           Variable = Variable, 
           Categories = Categories)
}
 
  
  
  compare_percentages <- function(df1, df2, group_var, vars) {
    
  df1_percentages <- calculate_percentages(df1, vars, group_var)
  df2_percentages <- calculate_percentages(df2, vars, group_var)

  joined_data <- inner_join(df1_percentages, df2_percentages, by = c("Variable", "Categories", group_var)) %>%
    mutate(
percent_diff =  percent.y -percent.x,
           relative_risk = percent.y / percent.x,
      # Estimate total counts
      total_df1 = n.x / (percent.x / 100),
      total_df2 = n.y / (percent.y / 100),
      # Calculate log of relative risk
      log_rr = log(relative_risk),
      # Calculate standard error of log relative risk
      se_log_rr = sqrt((1/n.x - 1/total_df1) + (1/n.y - 1/total_df2))
    )

  # For a 95% confidence interval
  z_score <- qnorm(0.975) # Approximately 1.96
  joined_data %>%
    mutate(
      ci_lower = exp(log_rr - z_score * se_log_rr),
      ci_upper = exp(log_rr + z_score * se_log_rr),
      rr_with_ci = sprintf("%.2f (%.2f-%.2f)", relative_risk, ci_lower, ci_upper),
      n_and_percent_df1 = sprintf("%d (%.1f%%)", n.x, percent.x),
      n_and_percent_df2 = sprintf("%d (%.1f%%)", n.y, percent.y),
      p_diff = sprintf("%.1f%%", percent_diff)
    ) %>%
    select(-log_rr, -se_log_rr, -total_df1, -total_df2) %>%
    rename(
      Percent_df1 = percent.x, 
      Percent_df2 = percent.y, 
      n_df1 = n.x,
      n_df2 = n.y,
      Variable = Variable, 
      Categories = Categories
    )
}

  
```

# -Table 1. Lifestyle characteristics

Table 1 is to describe the study population.

```{r}


    
val_use <- 
  colnames(
  df2 %>%
    select(HeightCM, WeightKG, Age, Sex, BMI, BMI_cat, Astrand_MaxVO2, Astrand_rel_VO2, astr_cat,TobaccoSmokingDi, HealthDi, ExerciseDi, PhysicalWorkSituationDi, Sickness_absence_within_1_year_of_HPA)
  )
to_char <- c("TobaccoSmoking", "BMI_cat", "astr_cat")

t1 <- 
df2 %>% 
  select(Period, any_of(val_use)) %>% 
  mutate(across(any_of(to_char), ~as.character(.))) %>%
  
  sum_table.fun(., 
                val = val_use,
                group = Period,
                stat_type = "mean_sd", # for numerical
                gr_order =  c("1995-1999", "2000-2004", "2005-2009", "2010-2014", "2015-2019", "2020-2021")) #unique(df2$Period))


t1  <-
t1 %>% 
  mutate(
    Variables = case_when(
    Variables == "HeightCM" ~ "Height cm, Mean (SD)",
    Variables == "WeightKG" ~ "Weight kg, Mean (SD)",
    Variables == "BMI" ~ "BMI, Mean (SD)",
    Variables == "BMI_cat" ~ "BMI, n (%)",
  #  Variables == "EkB_rel_VO2" ~ "Estimated relative VO2max by the Ekblom Bak test, Mean (SD)",
    Variables == "Astrand_rel_VO2" ~ "Estimated relative VO2max, Mean (SD)",
    Variables == "Astrand_MaxVO2" ~ "Estimated absolute VO2max, Mean (SD)",
    Variables == "astr_cat" ~ "VO2max Åstrand, n (%)",
    Variables == "TobaccoSmokingDi" ~ "Smoking, n (%)",
    Variables == "PhysicalWorkSituationDi" ~ "Physical work situation, n (%)",
    Variables == "ExerciseDi" ~ "Exercise, n (%)",
    Variables == "HealthDi" ~ "Perceived Health, n (%)",
    TRUE ~ Variables  
  ))  %>%  
  mutate(order = case_when(
    Variables == "HeightCM" ~ 1,
    Variables == "WeightKG" ~ 3,
    Variables == "BMI" ~ 5,
    Variables == "BMI_cat - ≤25" ~ 12,
        Variables == "BMI_cat - 25-30" ~ 13,
    Variables == "BMI_cat - ≥30" ~ 14,
    Variables == "Astrand_MaxVO2" ~ 7,
    Variables == "Astrand_rel_VO2" ~ 9,
    Variables == "astr_cat - <32" ~ 15,
    Variables == "astr_cat - ≥32" ~ 16,
    Variables == "TobaccoSmokingDi - Never" ~ 19,
    Variables == "PhysicalWorkSituationDi - Physically active work" ~ 34,
    Variables == "ExerciseDi - Weekly" ~ 29,
    Variables == "HealthDi - Good" ~ 24,
    TRUE ~ 999  # Other variables at the end
  )) %>%
  arrange(order) %>%
  select(-order) 

# Skapa en DataTable från den sammanfogade datan
   t1 %>% 
     mutate(Variables = ifelse(grepl("  -.+|^ $", .$Variables), 
                            .$Variables, paste0("<b>",.$Variables,"</b>")) ) %>% select( -`**p-value**`) %>% 
datatable(
  escape = FALSE,  # to render HTML
  extensions = 'Buttons',
  options = list(
    scrollX = TRUE,
    pageLength = 50,
    lengthMenu = list(c(5, 10, 30, 50, -1), c('5', '10', '30', '50', 'All')),
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel'),
    title = "Sammanställd Frekvens av ICD-koder",
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'font-size': '10px'});",
      "$(this.api().table().body()).css({'font-size': '10px'});",
      "}"
    )
  ),
  class = "compact" # This class reduces padding/margin in the table
)

# flextable(t1)

```

#-------------------------

# Sociodemographics

# -Table 2. Sociodemographics

Sociodemographic variables at the time of the HPI test are displayed as percentages across various groupings, serving both to characterize the study population and to lay the groundwork for subsequent analyses.

```{r}
to_char <- c("SSYK1_scb_hpi_combined")

val_use <- 
  colnames(
  df2 %>% select(
    Sex, 
    AgeGroup, 
    Place_of_origin, 
    Civil_status, 
    KommunSize, 
    EducationLevel, 
    SSYK,
    IncomeLevel,
    Income_Sources_Category, 
    consecutive_years_category
    )
  )


t2 <- df2 %>% 
  select(Period, any_of(val_use)) %>% 
  mutate(across(any_of(to_char), ~as.character(.))) %>%
  sum_table.fun(., 
                val = val_use,
                group = Period,
                stat_type = "mean_ci",
                gr_order =  c("1995-1999", "2000-2004", "2005-2009", "2010-2014", "2015-2019", "2020-2021")) #

t2  <-
t2 %>% 
  mutate(Variables = case_when(
    Variables == "Sex" ~ "Sex",
    Variables == "AgeGroup" ~ "Age group",
    Variables == "Place_of_origin" ~ "Place of birth",
    Variables == "Civil_status" ~ "Civil status",
    Variables == "KommunSize" ~ "Municipality",
    Variables == "EducationLevel" ~ "Education",
    Variables == "SSYK" ~ "Occupation",
    Variables == "IncomeLevel" ~ "Income  (% of median)",
    Variables == "Income_Sources_Category" ~ "Income Sources",
    Variables == "consecutive_years_category" ~ "Contractual temporariness",
    TRUE ~ Variables
  )) 


  t2 %>% 
     mutate(Variables = ifelse(grepl("  -.+|^ $", .$Variables), 
                            .$Variables, paste0("<b>",.$Variables,"</b>")) ) %>% 
    select( -`**p-value**`) %>% 
datatable(
  escape = FALSE,  # to render HTML
  extensions = 'Buttons',
  options = list(
    scrollX = TRUE,
    pageLength = 70,
    lengthMenu = list(c(5, 10, 30, 50, -1), c('5', '10', '30', '50', 'All')),
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel'),
    title = "Sammanställd Frekvens av ICD-koder",
        columnDefs = list(
      list(className = 'dt-body-right', targets = 2:8) # Target columns 2 to 7 -rightalign
    ),
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'font-size': '10px'});",
      "$(this.api().table().body()).css({'font-size': '10px'});",
      "}"
    )
  ),
  class = "compact" # This class reduces padding/margin in the table
)

```

#-------------------------

# Worklife characteristics

# -Table 3. Worklife characteristics

```{r}

to_char <- c("SSYK1_scb_hpi_combined")

val_use <- 
  colnames(
    df2 %>% select(
Ownership_sector, 
Number_of_employees_Category, 
SNI_group, 
Operatingprofit_category,
Operating_Profit_Margin_Category,
Turnover_Rate_Category
    ) 
  )
  

t3 <- df2 %>% 
  select(Period, any_of(val_use)) %>% 
  mutate(across(any_of(to_char), ~as.character(.))) %>%
  sum_table.fun(., 
                val = val_use,
                group = Period,
                stat_type = "mean_ci",
                gr_order =  c("1995-1999", "2000-2004", "2005-2009", "2010-2014", "2015-2019", "2020-2021"))


t3  <-
t3 %>% 
  mutate(Variables = case_when(
    Variables == "Ownership_sector" ~ "Ownership sector",
    Variables == "Number_of_employees_Category" ~ "Number of employees",
    Variables == "SNI_group" ~ "Economic sector",
    Variables == "Operatingprofit_category" ~ "Operating profit (% of median)",
    Variables == "Operating_Profit_Margin_Category" ~ "Operating profit margin",
    Variables == "Turnover_Rate_Category" ~ "Staff turnover",
    TRUE ~ Variables  
  ))

# Create DataTable
t3 %>% 
mutate(Variables = ifelse(grepl("  -.+|^ $", .$Variables), 
      .$Variables, paste0("<b>",.$Variables,"</b>")) ) %>% 
  select( -`**p-value**`) %>% 
datatable(
  escape = FALSE,  # to render HTML
  extensions = 'Buttons',
  options = list(
    scrollX = TRUE,
     pageLength = 70,
    lengthMenu = list(c(5, 10, 30, 50, -1), c('5', '10', '30', '50', 'All')),
    dom = 'Bfrtip',
    buttons = c('copy', 'csv', 'excel'),
    title = "Sammanställd Frekvens av ICD-koder",
      columnDefs = list(
      list(className = 'dt-body-right', targets = 2:8) # Target columns 2 to 7 -rightalign
    ),
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'font-size': '10px'});",
      "$(this.api().table().body()).css({'font-size': '10px'});",
      "}"
    )
  ),
  class = "compact" # This class reduces padding/margin in the table
)

```


